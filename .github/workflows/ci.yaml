name: CI
on:
  push: 
    branches:
      - develop
      - release*
    tags: [v*]
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - LICENSE
  pull_request:
  # Sequence of patterns matched against refs/heads
    branches:    
      - develop
      - release*
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - LICENSE

env:
  group: 'pipelines'
  repository: 'focal-freedom-236620/controller'
  ref: $(Build.SourceBranch)
  imageTag:
  buildTag: $(Build.BuildId)
  branchTag: $(Build.SourceBranchName)
  releaseCandidate: 'rc'

jobs:
  Build:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'write'
    name: Preflight
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - run: npm ci
    - run: npm run standard
    - run: |
        npm i -g better-npm-audit
        npx better-npm-audit audit -p

  Tests:
    needs: Build
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'write'
      issues: read
      checks: write
      pull-requests: write
    strategy:
      matrix:
        node: [ 19 ]
    name: Node ${{ matrix.node }} Test
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node ${{ matrix.node }} Test
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node }}
    - run: npm ci
    - run: npm run test -- junit
    - run: npm run postman_test
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          *-results.xml

  Publish:
    needs: [Build, Tests]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'write'
    name: Publish Controller
    steps:
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - run: npm ci
    - run: |
        npm pack
        ls iofog-iofogcontroller-*.tgz
    - name: 'Get Previous tag'
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
      with:
        fallback: 0.0.0
    # - name: Set image tag
    #   shell: bash
    #   id: tags
    #   run: |
    #     if [[ ${{ github.ref_name }} =~ ^v.* ]] ; then
    #       echo "tag=${{ github.ref_name }}" >> "${GITHUB_OUTPUT}"
    #     else
    #        echo "tag=${{ steps.previoustag.outputs.tag }}-${{ github.run_number }}" >> "${GITHUB_OUTPUT}"
    #     fi
    # - name: Get image tag
    #   run: |
    #     echo ${{ steps.tags.outputs.tag }}
    #     echo "edited_tag='${{ steps.tags.outputs.tag }} | sed 's/v//''"
    #     echo ${{ steps.tags.outputs.edited_tag }}

    - name: Save Docker image name and tag to GCR_DOCKER_IMAGE into artifacts
      id: gcr
      run: |
        echo "gcr_docker_image=gcr.io/${{ env.repository }}:${{ steps.tags.outputs.edited_tag }}" >> "${GITHUB_OUTPUT}"
    - name: Get GCR image
      run: echo ${{ steps.gcr.outputs.gcr_docker_image }}
    - name: npm version
      id: package-version
      uses: martinbeentjes/npm-get-version-action@v1.3.1
    - name: npm pack with version containing build number
      run: npm pack
    - name: package version
      shell: bash
      id: version
      run: |
        if [[ ${{ github.ref_name }} =~ ^v.* ]] ; then
          echo "pkg_version=${{ steps.package-version.outputs.current-version}}" >> "${GITHUB_OUTPUT}"
        else
           echo "pkg_version=${{ steps.package-version.outputs.current-version}}-${{ github.run_number }}" >> "${GITHUB_OUTPUT}"
        fi
    - name: display version
      run: |
        echo ${{ steps.tags.outputs.edited_tag }}
        echo ${{ steps.version.outputs.pkg_version }}
    - name: Login to Github Container Registry
      uses: docker/login-action@v2
      with:
        registry: "ghcr.io"
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Build and Push Container Image
      uses: docker/build-push-action@v3
      id: build
      with:
        file: Dockerfile.dev
        push: true
        tags: |
          ghcr.io/eclipse-iofog/controller:${{ steps.version.outputs.pkg_version }}
          ghcr.io/eclipse-iofog/controller:latest
        build-args: PKG_VERSION=${{ steps.version.outputs.pkg_version }}
    - uses: actions/upload-artifact@v2
      with:
        name: npm-package
        path: iofog-iofogcontroller-*.tgz
    - uses: actions/download-artifact@v2
      with:
        name: npm-package
    - run: ls
    - uses: danielmundi/upload-packagecloud@v1
      with:
        PACKAGE-NAME: iofog-iofogcontroller-*.tgz
        PACKAGECLOUD-USERNAME: iofog
        PACKAGECLOUD-REPO: iofog-controller-snapshots
        PACKAGECLOUD-DISTRIB: node
        PACKAGECLOUD-TOKEN: ${{ secrets.packagecloud_token }}
      

    # - name: setting vars
    #   id: npm_tar
    #   run: |
    #     ls ${{ github.workspace }}
    #     echo 'checking pack file exists..'
    #     cat iofog-iofogcontroller-*.tgz
    #     # echo "tar=${iofog-iofogcontroller-*.tgz}" >> "${GITHUB_OUTPUT}"
    # - name: Get tar
    #   run: |
    #     cat iofog-iofogcontroller-*.tgz
    #     echo ${{ steps.npm_tar.outputs.tar }}


# name: GitHub Actions Demo
# run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
# on: [push]
# jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v3
#       - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "🖥️ The workflow is now ready to test your code on the runner."
#       - name: List files in the repository
#         run: |
#           ls ${{ github.workspace }}
#       - run: echo "🍏 This job's status is ${{ job.status }}."