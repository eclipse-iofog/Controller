swagger: '2.0'
info:
  version: 3.0.0
  title: FogController
consumes:
  - application/json
produces:
  - application/json
paths:
  '/status':
    get:
      tags:
        - Controller
      description: Returns service health status
      operationId: getServiceStatus
      responses:
        '200':
          description: Service status
          schema:
            $ref: '#/definitions/ServiceStatusResponse'
        '500':
          description: Internal Server Error
  '/email-activation':
    get:
      tags:
        - Controller
      description: Returns email activation status
      operationId: getEmailActivationStatus
      responses:
        '200':
          description: Email activation status
          schema:
            $ref: '#/definitions/EmailActivationStatusResponse'
        '500':
            description: Internal Server Error
  '/fog-types':
    get:
      tags:
        - Controller
      description: Gets ioFog types list
      operationId: getIOFogTypes
      parameters:
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IOFogTypesResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
  /iofog:
    get:
      tags:
        - ioFog
      description: Returns list of ioFog nodes
      operationId: getIOFogNodes
      parameters:
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
        - in: query
          name: filterBy
          type: array
          items:
            type: string
          required: false
        - in: query
          name: filterValue
          type: array
          items:
            type: string
          required: false
      responses:
        '200':
          description: List of ioFog nodes
          schema:
            $ref: '#/definitions/IOFogNodesListResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
    post:
      tags:
        - ioFog
      description: Creates a new ioFog node
      operationId: createIOFogNode
      parameters:
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
        - in: body
          name: IOFogNodeInfo
          required: true
          schema:
            $ref: '#/definitions/UpdateIOFogNodeRequestBody'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/NewIOFogNodeResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
  '/iofog/{id}':
    patch:
      tags:
        - ioFog
      description: Updates existing ioFog node
      operationId: updateIOFogNode
      parameters:
        - in: path
          name: id
          description: ioFog node id
          required: true
          type: string
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
        - in: body
          name: ioFogNodeInfo
          required: true
          schema:
            $ref: '#/definitions/UpdateIOFogNodeRequestBody'
      responses:
        '204':
          description: Updated
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
    delete:
      tags:
        - ioFog
      description: Deletes an ioFog node
      operationId: deleteIOFogNode
      parameters:
        - in: path
          name: id
          description: ioFog node id
          required: true
          type: string
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        '204':
          description: Deleted
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
    get:
      tags:
        - ioFog
      description: Gets ioFog node info
      operationId: getIOFogNode
      parameters:
        - in: path
          name: id
          description: ioFog node id
          required: true
          type: string
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IOFogNodeInfoResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/iofog/{id}/provisioning-key':
    get:
      tags:
        - ioFog
      description: Generates provisioning key for an ioFog node
      operationId: generateProvisioningKey
      parameters:
        - in: path
          name: id
          description: ioFog node id
          required: true
          type: string
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/ProvisioningKeyResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  /iofog/agent/provision:
    post:
      tags:
        - Agent
      description: Provision agent with an ioFog node
      operationId: agentProvision
      parameters:
        - in: body
          required: true
          name: AgentProvisioningRequest
          schema:
            $ref: '#/definitions/AgentProvisioningRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AgentProvisioningResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '404':
          description: Invalid Provisioning Key
        '500':
          description: Internal Server Error
  '/iofog/{id}/agent/config':
    get:
      tags:
        - Agent
      description: Get an ioFog node configuration
      operationId: getIOFogNodeConfig
      parameters:
        - in: path
          required: true
          name: id
          description: ioFog node id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IOFogNodeConfig'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Agent
      description: Updates an ioFog node configuration
      operationId: updateIOFogNodeConfig
      parameters:
        - in: path
          required: true
          name: id
          description: ioFog node id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
        - in: body
          name: UpdateIOFogNodeConfigRequestBody
          required: true
          schema:
            $ref: '#/definitions/IOFogNodeConfig'
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/iofog/{id}/agent/config/changes':
    get:
      tags:
        - Agent
      description: Gets ioFog node changes sinces provided timestamp
      operationId: getIOFogNodeChanges
      parameters:
        - in: path
          required: true
          name: id
          description: ioFog node id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
        - in: query
          name: timestamp
          required: false
          type: number
          default: 0
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IOFogNodeConfigChanges'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/iofog/{id}/agent/status':
    put:
      tags:
        - Agent
      description: Posts agent status to ioFog node
      operationId: postAgentStatus
      parameters:
        - in: path
          required: true
          name: id
          description: ioFog node id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
        - in: body
          name: AgentStatus
          required: true
          schema:
            $ref: '#/definitions/AgentStatus'
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/iofog/{id}/agent/microservices':
    get:
      tags:
        - Agent
      description: Gets microservices running on an ioFog node
      operationId: getAgentMicroservicesList
      parameters:
        - in: path
          required: true
          name: id
          description: ioFog node id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AgentMicroservicesListResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/iofog/{ioFogId}/agent/microservices/{microserviceId}':
    get:
      tags:
        - Agent
      description: Gets microservices running on an ioFog node
      operationId: getAgentMicroserviceInfo
      parameters:
        - in: path
          required: true
          name: ioFogId
          description: ioFog node id
          type: string
        - in: path
          required: true
          name: microserviceId
          description: Microservice id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AgentMicroservicesInfoResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/iofog/{id}/agent/registries':
    get:
      tags:
        - Agent
      description: Gets list of Docker registries
      operationId: getRegistriesList
      parameters:
        - in: path
          required: true
          name: id
          description: ioFog node id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RegistriesListResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/iofog/{id}/agent/proxy':
    get:
      tags:
        - Agent
      description: Get an ioFog node proxy configuration
      operationId: getIOFogNodeProxyConfig
      parameters:
        - in: path
          required: true
          name: id
          description: ioFog node id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IOFogNodeProxyConfigResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/iofog/{id}/agent/strace':
    get:
      tags:
        - Agent
      description: Get an ioFog node strace info
      operationId: getIOFogNodeStraceInfo
      parameters:
        - in: path
          required: true
          name: id
          description: ioFog node id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IOFogNodeStraceResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
    put:
      tags:
        - Agent
      description: Posts agent strace to ioFog node
      operationId: postIOFogNodeStraceBuffer
      parameters:
        - in: path
          required: true
          name: id
          description: ioFog node id
          type: string
        - in: header
          name: Authorization
          description: Agent Token
          required: true
          type: string
        - in: body
          name: AgentStraceBuffers
          required: true
          schema:
            $ref: '#/definitions/IOFogNodeStraceBuffer'
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  /catalog/microservices:
    get:
      tags:
        - Catalog
      description: Gets microservices catalog
      operationId: getMicroservicesCatalog
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MicroservicesCatalogResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
    post:
      tags:
        - Catalog
      description: Creates a new microservice catalog item
      operationId: createMicroserviceCatalogItem
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: body
          name: CreateCatalogItem
          description: Microservice Catalog Item Info
          required: true
          schema:
            $ref: '#/definitions/CreateUpdateCatalogItemRequestBody'
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              id:
                type: string
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
  '/catalog/microservices/{id}':
    get:
      tags:
        - Catalog
      description: Gets microservice catalog item info
      operationId: getMicroserviceCatalogItem
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Catalog Item Id
          required: true
          type: string
      responses:
        '200':
          description: Catalog Item Info
          schema:
            $ref: '#/definitions/CatalogItemInfoResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Catalog Item Id
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Catalog
      description: Updates a microservice catalog item
      operationId: updateMicroserviceCatalogItem
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Catalog Item Id
          required: true
          type: string
        - in: body
          name: UpdateCatalogItem
          description: Microservice Catalog Item Info
          required: true
          schema:
            $ref: '#/definitions/CreateUpdateCatalogItemRequestBody'
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Catalog Item Id
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Catalog
      description: Deletes a microservice catalog item
      operationId: deleteMicroserviceCatalogItem
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Catalog Item Id
          required: true
          type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Catalog Item Id
        '500':
          description: Internal Server Error
  /flow:
    get:
      tags:
        - Flow
      description: Gets list of flows
      operationId: getFlowsList
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFlowsResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
    post:
      tags:
        - Flow
      description: Creates a new flow
      operationId: createFlow
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: body
          name: NetFlowInfo
          description: New Flow Info
          required: true
          schema:
            $ref: '#/definitions/NewFlowRequest'
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              id:
                type: string
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
  '/flow/{id}':
    get:
      tags:
        - Flow
      description: Gets flow info
      operationId: getFlowInfo
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Flow Id
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FlowInfoResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Flow Id
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Flow
      description: Updates a flow
      operationId: updateFlow
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Flow Id
          required: true
          type: string
        - in: body
          name: NetFlowInfo
          description: New Flow Info
          required: true
          schema:
            $ref: '#/definitions/NewFlowRequest'
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Invalid Flow Id
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Flow
      description: Deletes a flow
      operationId: deleteFlow
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Flow Id
          required: true
          type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Flow Id
        '500':
          description: Internal Server Error
  /iofog/microservices:
    get:
      tags:
        - Microservices
      description: Gets list of microservices
      operationId: getMicroservicesList
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: query
          name: fogId
          description: ioFog Node Id
          required: false
          type: string
        - in: query
          name: flowId
          description: Flow Id
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetMicroservicesResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
    post:
      tags:
        - Microservices
      description: Creates a new microservice on an ioFog node
      operationId: createMicroservice
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: body
          name: NetMicroserviceInfo
          description: New Microserviced Info
          required: true
          schema:
            $ref: '#/definitions/NewMicroserviceRequest'
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              id:
                type: string
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
  '/iofog/microservices/{id}':
    get:
      tags:
        - Microservices
      description: Gets a microservice info
      operationId: getMicroserviceInfo
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Microservice Id
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MicroserviceInfoResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Microservices
      description: Updates a microservice
      operationId: updateMicroservice
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Microservice Id
          required: true
          type: string
        - in: body
          name: UpdateMicroserviceInfo
          description: Microservice Info
          required: true
          schema:
            $ref: '#/definitions/UpdateMicroserviceRequest'
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Microservices
      description: Deletes a microservice
      operationId: deleteMicroservice
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Microservice Id
          required: true
          type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  '/iofog/microservices/{id}/routes/{recieverId}':
    post:
      tags:
        - Microservices
      description: Creates a route from microservice to receiver
      operationId: createMicroserviceRoute
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Microservice Id
          required: true
          type: string
        - in: path
          name: recieverId
          description: Receiver Microservice Id
          required: true
          type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: recieverId Is Not Valid
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Microservices
      description: Deletes a route microservice
      operationId: deleteMicroserviceRoue
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Microservice Id
          required: true
          type: string
        - in: path
          name: recieverId
          description: Receiver Microservice Id
          required: true
          type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: recieverId Is Not Valid
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  '/iofog/microservices/{id}/strace':
    post:
      tags:
        - Diagnostics
      description: Enables Microservice Strace Option
      operationId: enableMicroserviceStrace
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Microservice Id
          required: true
          type: string
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              id:
                type: string
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Microservice Id
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Diagnostics
      description: Disables Microservice Strace Option
      operationId: disableMicroserviceStrace
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Microservice Id
          required: true
          type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Microservice Id
        '500':
          description: Internal Server Error
    get:
      tags:
        - Diagnostics
      description: Gets Strace Data for Microservice
      operationId: getMicroserviceStrace
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: path
          name: id
          description: Microservice Id
          required: true
          type: string
        - in: query
          name: format
          required: true
          type: string
          enum:
            - file
            - string
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              data:
                type: string
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Microservice Id
        '500':
          description: Internal Server Error
    put:
      tags:
        - Diagnostics
      description: Posts Microservice Strace file to FTP
      operationId: postMicroserviceStraceToFTP
      parameters:
        - in: path
          required: true
          name: id
          description: Microservice Id
          type: string
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: body
          name: straceData
          required: true
          schema:
            $ref: '#/definitions/MicroserviceStraceFTPBody'
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Invalid Microservice Id
        '500':
          description: Internal Server Error
  '/iofog/{id}/tunnel':
    post:
      tags:
        - Tunnel
      description: Opens ssh tunnel
      operationId: openIOFogNodeSshTunnel
      parameters:
        - in: path
          name: id
          description: ioFog node id
          required: true
          type: string
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
    get:
      tags:
        - Tunnel
      description: Gets current info about ioFog node ssh tunnel status
      operationId: getIOFogNodeSshTunnelStatusInfo
      parameters:
        - in: path
          name: id
          description: ioFog node id
          required: true
          type: string
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IOFogNodeTunnelStatusInfoResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Tunnel
      description: Closes ssh tunnel
      operationId: closeIOFogNodeSshTunnel
      parameters:
        - in: path
          name: id
          description: ioFog node id
          required: true
          type: string
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/registries':
    post:
      tags:
        - Registries
      description: Creates new registry
      operationId: createRegistry
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: body
          name: Filters
          required: false
          schema:
            $ref: '#/definitions/RegistryBody'
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
    get:
      tags:
        - Registries
      description: Gets list of registries
      operationId: getRegistryList
      parameters:
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RegistriesListResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '500':
          description: Internal Server Error
  '/registries/{id}':
    delete:
      tags:
        - Registries
      description: Deletes a registry
      operationId: deleteRegistry
      parameters:
        - in: path
          name: id
          description: Registry id
          required: true
          type: string
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        '204':
          description: Deleted
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        '401':
          description: Not Authorized
        '404':
          description: Invalid Node Id
        '500':
          description: Internal Server Error
  '/user/login':
    post:
      tags:
      - User
      description: Login
      operationId: login
      parameters:
      - in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/LoginRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/LoginSuccessResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        400:
          description: bad request
        401:
          description: incorrect credentials
  '/user/logout':
    post:
      tags:
      - User
      description: Logout
      operationId: logout
      parameters:
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        204:
          description: Success
        401:
          description: Not Authorized
        500:
          description: Internal Server Error
  '/user/signup':
    post:
      tags:
        - User
      description: Signup
      operationId: signup
      parameters:
        - in: body
          name: user
          description: new user data
          required: true
          schema:
            $ref: '#/definitions/SignupRequest'
      responses:
        201:
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  '/user/signup/resend-activation':
    get:
      tags:
        - User
      description: Resend activation email
      operationId: resendActivationEmail
      parameters:
        - in: query
          name: email
          required: true
          type: string
      responses:
        204:
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  '/user/activate':
    post:
      tags:
        - User
      description: Activate account
      operationId: activateAccount
      parameters:
        - in: query
          name: activationCode
          description: activation code
          required: true
          type: string
      responses:
        303:
          description: Redirect to login page
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
            Location:
              description: Login page url
              type: string
        404:
          description: Not Found
        500:
          description: Internal Server Error
  '/user/profile':
    get:
      tags:
        - User
      description: Get current user profile data
      operationId: getUserProfile
      parameters:
        - in: header
          name: Authorization
          description: User token
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/UserProfileDetailsResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        401:
          description: Not Authorized
        500:
          description: Internal Server Error
    patch:
      tags:
        - User
      description: Update user profile
      operationId: updateUserProfile
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: body
          name: profileData
          description: Updated profile data
          required: true
          schema:
            $ref: '#/definitions/UserProfileUpdatesRequest'
      responses:
        200:
          description: Updated user profile
          schema:
            $ref: '#/definitions/UserProfileDetailsResponse'
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        400:
          description: Bad Request
        401:
          description: Not Authorized
        500:
          description: Internal Server Error
    delete:
      tags:
        - User
      description: Delete account
      operationId: deleteAccount
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
      responses:
        204:
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        401:
          description: Not Authorized
        500:
          description: Internal Server Error
  '/user/password':
    patch:
      tags:
        - User
      description: change password
      operationId: changePassword
      parameters:
        - in: header
          name: Authorization
          description: User Token
          required: true
          type: string
        - in: body
          name: passwordUpdates
          description: current and new password
          required: true
          schema:
            $ref: '#/definitions/PasswordChangeRequest'
      responses:
        204:
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        401:
          description: Not Authorized
        500:
          description: Internal Server Error
    delete:
      tags:
        - User
      description: Reset password
      operationId: resetPassword
      responses:
        204:
          description: Success
          headers:
            X-Timestamp:
              type: number
              description: FogController server timestamp
        500:
          description: Internal Server Error

definitions:
  ServiceStatusResponse:
    type: object
    properties:
      status:
        type: string
        example: ok
      timestamp:
        type: number
  EmailActivationStatusResponse:
    type: object
    properties:
      emailActivation:
        type: string
  IOFogTypesResponse:
    type: object
    properties:
      fogTypes:
        type: array
        items:
          $ref: '#/definitions/IOFogType'
  IOFogType:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
      image:
        type: string
      description:
        type: string
  IOFogNodesListResponse:
    type: object
    properties:
      instances:
        type: array
        items:
          $ref: '#/definitions/IOFogNodeInfoResponse'
  IOFogNodeInfoResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      location:
        type: string
      gpsMode:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      description:
        type: string
      createAt:
        type: number
      updatedAt:
        type: number
      lastActive:
        type: number
      daemonStatus:
        type: string
      daemonOperatingDuration:
        type: number
      daemonLastStart:
        type: number
      memoryUsage:
        type: number
      diskUsage:
        type: number
      cpuUsage:
        type: number
      memoryViolation:
        type: boolean
      diskViolation:
        type: boolean
      cpuViolation:
        type: boolean
      microserviceStatus:
        type: string
      respositoryCount:
        type: number
      repositoryStatus:
        type: string
      systemTime:
        type: number
      lastStatusTime:
        type: number
      ipAddress:
        type: string
      processedMessages:
        type: number
      microserviceMessageCounts:
        type: number
      messageSpeed:
        type: number
      lastCommandTime:
        type: number
      networkInterface:
        type: string
      dockerUrl:
        type: string
      diskLimit:
        type: number
      diskDirectory:
        type: string
      memoryLimit:
        type: number
      cpuLimit:
        type: number
      logLimit:
        type: number
      logDirectory:
        type: string
      bluetooth:
        type: boolean
      hal:
        type: boolean
      isolatedDockerContainer:
        type: boolean
      logFileCount:
        type: number
      version:
        type: string
      isReadyToUpgrade:
        type: boolean
      isReadyToRollback:
        type: boolean
      statusFrequency:
        type: number
      changeFrequency:
        type: number
      scanFrequency:
        type: number
      proxy:
        type: string
      type:
        $ref: '#/definitions/IOFogType'
  UpdateIOFogNodeRequestBody:
    type: object
    properties:
      name:
        type: string
      location:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      description:
        type: string
      dockerUrl:
        type: string
        default: 'unix:///var/run/docker.sock'
      diskLimit:
        type: number
        default: 50
      diskDirectory:
        type: string
        default: /var/lib/iofog
      memoryLimit:
        type: number
        default: 4096
        format: MB
      cpuLimit:
        type: number
        default: 80
        format: percent
      logLimit:
        type: number
        default: 10
        format: GB
      logDirectory:
        type: string
        default: /var/log/iofog
      logFileCount:
        type: number
        default: 10
      statusFrequency:
        type: number
        default: 10
        format: seconds
      changeFrequency:
        type: number
        default: 20
        format: seconds
      deviceScanFrequency:
        type: number
        default: 20
        format: seconds
      bluetoothEnabled:
        type: boolean
        default: false
      watchdogEnabled:
        type: boolean
        default: true
      abstractedHardwareEnabled:
        type: boolean
        default: false
      autoGPSEnabled:
        type: boolean
        default: false
      reboot:
        type: boolean
        default: false
      fogType:
        type: number
  NewIOFogNodeResponse:
    type: object
    properties:
      id:
        type: string
  ProvisioningKeyResponse:
    type: object
    properties:
      key:
        type: string
      expirationTime:
        type: number
  AgentProvisioningRequest:
    type: object
    required:
      - type
      - key
    properties:
      type:
        type: number
        enum:
          - 1
          - 2
        description: >
          Architecture
           * '1': x86
           * '2': arm
      key:
        type: string
        description: provisioning key
  AgentProvisioningResponse:
    type: object
    properties:
      id:
        type: string
        description: ioFog Node Id
      token:
        type: string
        description: Agent token
  IOFogNodeConfigChanges:
    type: object
    properties:
      config:
        type: boolean
      microservicesList:
        type: boolean
      microservicesConfig:
        type: boolean
      routing:
        type: boolean
      registries:
        type: boolean
  IOFogNodeConfig:
    type: object
    properties:
      networkinterface:
        type: string
      dockerurl:
        type: string
      disklimit:
        type: number
      diskdirectory:
        type: string
      memorylimit:
        type: number
      cpulimit:
        type: number
      loglimit:
        type: number
      logdirectory:
        type: string
      logfilecount:
        type: number
      statusfrequency:
        type: number
      changefrequency:
        type: number
  AgentStatus:
    type: object
    properties:
      daemonStatus:
        type: string
      daemonOperatingDuration:
        type: number
      daemonLastStart:
        type: number
      memoryUsage:
        type: number
      diskUsage:
        type: number
      cpuUsage:
        type: number
      memoryViolation:
        type: boolean
      diskViolation:
        type: boolean
      cpuViolation:
        type: boolean
      microservicesStatus:
        type: string
      respositoryCount:
        type: number
      repositoryStatus:
        type: string
      systemTime:
        type: number
      lastStatusTime:
        type: number
      ipAddress:
        type: string
      processedMessages:
        type: number
      microserviceMessageCounts:
        type: string
      messageSpeed:
        type: number
      lastCommandTime:
        type: number
  IOFogNodeProxyConfigResponse:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      host:
        type: string
      remotePort:
        type: number
      localPort:
        type: number
      rsaKey:
        type: string
      closed:
        type: boolean
  IOFogNodeStraceResponse:
    type: object
    properties:
      straceValues:
        type: array
        items:
          $ref: '#/definitions/MicroserviceStrace'
  MicroserviceStrace:
    type: object
    properties:
      microserviceId:
        type: string
      straceRun:
        type: boolean
  IOFogNodeStraceBuffer:
    type: object
    properties:
      straceData:
        type: array
        items:
          $ref: '#/definitions/MicroserviceStraceBuffer'
  MicroserviceStraceBuffer:
    type: object
    properties:
      microserviceId:
        type: string
      buffer:
        type: string
  MicroserviceStraceFTPBody:
    type: object
    properties:
      ftpHost:
        type: string
      ftpPort:
        type: number
      ftpUser:
        type: string
      ftpPass:
        type: string
      ftpDestDir:
        type: string
  AgentMicroservicesListResponse:
    type: array
    items:
      $ref: '#/definitions/AgentMicroservicesInfoResponse'
  AgentMicroservicesInfoResponse:
    type: object
    properties:
      id:
        type: string
      lastModified:
        type: number
      lastUpdated:
        type: number
      rebuild:
        type: boolean
      rootHostAccess:
        type: boolean
      logSize:
        type: number
      imageId:
        type: string
      registryUrl:
        type: string
      ports:
        type: array
        items:
          $ref: '#/definitions/PortMappingsResponse'
      config:
        type: string
      routes:
        $ref: '#/definitions/ReceiverMicroservices'
  ReceiverMicroservices:
    type: array
    items:
      type: string
  PortMappingsResponse:
    type: object
    properties:
      internal:
        type: number
      external:
        type: number
      tunnel:
        type: boolean
      accessUrl:
        type: string
  PortMappingsRequest:
    type: object
    properties:
      internal:
        type: number
      external:
        type: number
      tunnel:
        type: boolean
  RegistriesListResponse:
    type: array
    items:
      $ref: '#/definitions/RegistryResponse'
  RegistryResponse:
    type: object
    properties:
      id:
        type: number
      url:
        type: string
      isPublic:
        type: boolean
      isSecure:
        type: boolean
      certificate:
        type: string
      requiresCert:
        type: boolean
      username:
        type: string
      password:
        type: string
      userEmail:
        type: string
      userId:
        type: string
      ioFogId:
        type: string
  RegistryBody:
    type: object
    properties:
      url:
        type: string
      isPublic:
        type: boolean
      username:
        type: string
      password:
        type: string
      email:
        type: string
  MicroservicesCatalogResponse:
    type: array
    items:
      $ref: '#/definitions/CatalogItemInfoResponse'
  CatalogItemInfoResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      category:
        type: string
      publisher:
        type: string
      diskRequired:
        type: number
      ramRequired:
        type: number
      picture:
        type: string
      isPublic:
        type: boolean
      registryId:
        type: number
      inputType:
        type: string
      inputFormat:
        type: string
      outputType:
        type: string
      outputFormat:
        type: string
      configExample:
        type: string
      containersImages:
        type: object
        $ref: '#/definitions/ElementContainerImages'
  ElementContainerImages:
    type: object
    properties:
      x86ContainerImage:
        type: string
      armContainerImage:
        type: string
  CreateUpdateCatalogItemRequestBody:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      category:
        type: string
      containersImages:
        type: object
        $ref: '#/definitions/ElementContainerImages'
      publisher:
        type: string
      diskRequired:
        type: number
      ramRequired:
        type: number
      picture:
        type: string
      isPublic:
        type: boolean
      registryId:
        type: number
      inputType:
        type: string
      inputFormat:
        type: string
      outputType:
        type: string
      outputFormat:
        type: string
      configExample:
        type: string
  GetFlowsResponse:
    type: array
    items:
      $ref: '#/definitions/FlowInfoResponse'
  FlowInfoResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      updatedBy:
        type: number
      description:
        type: string
      isSelected:
        type: boolean
      isActivated:
        type: boolean
      createdAt:
        type: number
      updatedAt:
        type: number
      userId:
        type: string
  NewFlowRequest:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      isSelected:
        type: boolean
      isActivated:
        type: boolean
  GetMicroservicesResponse:
    type: array
    items:
      $ref: '#/definitions/MicroserviceInfoResponse'
  MicroserviceInfoResponse:
    type: object
    properties:
      id:
        type: string
      catalogItem:
        $ref: '#/definitions/CatalogItemInfoResponse'
      config:
        type: string
      name:
        type: string
      ioFogNodeId:
        type: string
      rebuild:
        type: boolean
      rootHostAccess:
        type: boolean
      logSize:
        type: number
      ports:
        $ref: '#/definitions/PortMappingsResponse'
      routes:
        $ref: '#/definitions/ReceiverMicroservices'
  NewMicroserviceRequest:
    type: object
    properties:
      name:
        type: string
      catalogItemId:
        type: string
      flowId:
        type: string
      ioFogNodeId:
        type: string
      config:
        type: string
      volumeMappings:
        type: string
      logLimit:
        type: number
      rootHostAccess:
        type: boolean
      ports:
        $ref: '#/definitions/PortMappingsRequest'
      routes:
        $ref: '#/definitions/ReceiverMicroservices'
  UpdateMicroserviceRequest:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      ioFogNodeId:
        type: string
      config:
        type: string
      volumeMappings:
        type: string
      logLimit:
        type: number
      rootHostAccess:
        type: boolean
      rebuild:
        type: boolean
      ports:
        $ref: '#/definitions/PortMappingsRequest'
      routes:
        $ref: '#/definitions/ReceiverMicroservices'
  IOFogNodeTunnelStatusInfoResponse:
    type: object
    properties:
      username:
        type: string
      host:
        type: string
      remotePort:
        type: number
      localPort:
        type: number
      status:
        type: string
  LoginRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
  LoginSuccessResponse:
    type: object
    required:
      - accessToken
    properties:
      accessToken:
        type: string
  UserProfileDetailsResponse:
    type: object
    required:
      - firstName
      - lastName
      - email
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
  UserProfileUpdatesRequest:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
  PasswordChangeRequest:
    type: object
    required:
      - oldPassword
      - newPassword
    properties:
      oldPassword:
        type: string
      newPassword:
        type: string
  SignupRequest:
    type: object
    required:
      - firstName
      - lastName
      - email
      - password
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string

schemes:
  - http
  - https
host: 'localhost:54421'
basePath: /api/v3
