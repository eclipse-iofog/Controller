sudo: true
language: node_js
node_js: "9"
notifications:
  email: false
  slack:
    rooms:
      - secure: amP0nLt6NoTtatbxzq1DXpkyVWCmwasGVrzwtyeTEkz/A4H8rA6nAOHdBIIiIVBySaTBVpR2uar9MFWTVy7kWuzRDnBLlkjuXia0Paykv9ENf8CysW0bddhRZNz0zp3SKjjCUCPXe5bmEszQjGKCBOj2XJrkpdnYQdk0L+AqNMGcI2xhu8/RSlww6Ld7OsnkvDyVvOnriclXinZu3V3f6mY7GuXcRva/qowIE8RMGmH70DPBOkCbo7D8g6WtGXcT7sgJVsTOiqPknmQRHJcHi9d55J1fr2cRNRxOCi3pz6B8jwx9BLxKbSttEAO9r9634/Yx6GByE8JaidgVkIm6OTvi6fkCHZZWJGgyxRke/EOOjhdMHSuhVQtBX6RQ4ADRs4Ja4+g9EplXsPaxY4KI7E5jV0HuBn5M7m8RrZ2npP36kqc5/T87tDrocQVKTw5TxYiHUh2GHVw90eA5XFS5eYxT/Ts39n+Jk0CznBQsV47xcUi78OdajP8dAHu/6uC8+xTuN3A00KodH+8H0rQIq6GemMF9FbqRZDjb5ouGu5sI2aiTamKomn1XkBQkDkkrRXLbFg1xfG2XwQHuT7+rBrLqc9QSS+55hz3YDoHvs2EGoYjHLbs/5N25V24LbFJfbg1dF5PxVQ4L58NR5A23zNduElWgzsME8UDtgT9/lac=
    on_success: always
    on_failure: always
    template:
      - "Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of %{repository_slug}@%{branch} in PR <%{pull_request_url}|#%{pull_request_number}> by %{author} %{result} in %{duration}"
env:
  global:
    - COMMIT=${TRAVIS_COMMIT::8}
stages:
- name: test
  if: branch =~ /^release-.*$/ OR branch IN (develop, master)
- name: dev_deploy
  if: branch = develop AND type = push
- name: pre_release_deploy
  if: branch =~ /^release-.*$/ AND type = push
- name: release_deploy
  if: branch = master and type = push

jobs:
  include: 
  - script: "npm test"
  - script: "npm run postman_test"
  - stage: dev_deploy
    before_install:
      - sudo apt-get install sshpass
    script: skip
    before_deploy:
      - npm pack
    deploy:
      skip_cleanup: true
      provider: script
      script: 
        - sshpass -p $EDGEWORX_PASSWORD scp -o StrictHostKeyChecking=no iofogcontroller-*.tgz 
          $EDGEWORX_USERNAME@$EDGEWORX_IP:/var/www/vhosts/edgeworx.io/downloads/builds/iofogcontroller.tgz  
      on:
        branch: develop  
    after_deploy:
      - sshpass -p $DEV_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $DEV_MACHINE_USERNAME@$DEV_MACHINE_IP
        "iofog-controller stop; rm -f /iofogcontroller/*"
      - sshpass -p $DEV_MACHINE_PASSWORD scp -o StrictHostKeyChecking=no iofogcontroller-*.tgz 
        $DEV_MACHINE_USERNAME@$DEV_MACHINE_IP:/iofogcontroller 
      - sshpass -p $DEV_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $DEV_MACHINE_USERNAME@$DEV_MACHINE_IP
        "npm i --unsafe-perm -g /iofogcontroller/iofogcontroller-*.tgz; iofog-controller start"

      - sshpass -p $JRC_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $JRC_MACHINE_USERNAME@$JRC_MACHINE_IP
        "iofog-controller stop; rm -f /iofogcontroller/*"
      - sshpass -p $JRC_MACHINE_PASSWORD scp -o StrictHostKeyChecking=no iofogcontroller-*.tgz 
        $JRC_MACHINE_USERNAME@$JRC_MACHINE_IP:/iofogcontroller 
      - sshpass -p $JRC_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $JRC_MACHINE_USERNAME@$JRC_MACHINE_IP
        "npm i --unsafe-perm -g /iofogcontroller/iofogcontroller-*.tgz; iofog-controller start"
      - sshpass -p $JRC_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $JRC_MACHINE_USERNAME@$JRC_MACHINE_IP
        "iofog-controller start; iofog-controller user add -f John -l Doe -e user@domain.com -p ${JRC_MACHINE_PASSWORD}"

      - sshpass -p $ATTINAD_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $ATTINAD_MACHINE_USERNAME@$ATTINAD_MACHINE_IP
        "iofog-controller stop; rm -f /iofogcontroller/*"
      - sshpass -p $ATTINAD_MACHINE_PASSWORD scp -o StrictHostKeyChecking=no iofogcontroller-*.tgz 
        $ATTINAD_MACHINE_USERNAME@$ATTINAD_MACHINE_IP:/iofogcontroller 
      - sshpass -p $ATTINAD_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $ATTINAD_MACHINE_USERNAME@$ATTINAD_MACHINE_IP
        "npm i --unsafe-perm -g /iofogcontroller/iofogcontroller-*.tgz; iofog-controller start"
      - sshpass -p $ATTINAD_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $ATTINAD_MACHINE_USERNAME@$ATTINAD_MACHINE_IP
        "iofog-controller start; iofog-controller user add -f John -l Doe -e user@domain.com -p ${ATTINAD_MACHINE_PASSWORD}"

      - docker build -t iofog/controller-develop:latest --build-arg FILENAME=$(ls iofogcontroller-*.tgz) . -f Dockerfile.dev
      - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
      - docker push iofog/controller-develop:latest
      - docker tag iofog/controller-develop:latest iofog/controller-develop:$COMMIT
      - docker push iofog/controller-develop:$COMMIT
  - stage: pre_release_deploy
    before_install:
      - sudo apt-get install sshpass
    script: skip
    before_deploy:
      - npm pack
    deploy:
      skip_cleanup: true
      provider: npm
      email: "${NPM_EMAIL_ADDRESS}"
      api_key: "${NPM_AUTH_TOKEN}"
      tag: dev
      on:
        all_branches: true
    after_deploy:
      - sshpass -p $PREPROD_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $PREPROD_MACHINE_USERNAME@$PREPROD_MACHINE_IP
        "iofog-controller stop; npm i --unsafe-perm -g iofogcontroller@dev; iofog-controller start"
      - export VERSION=`npm view iofogcontroller version`
      - docker build -t iofog/controller:rc --build-arg FILENAME=$(ls iofogcontroller-*.tgz) . -f Dockerfile.rel
      - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
      - docker push iofog/controller:rc
      - docker tag iofog/controller:rc iofog/controller:rc-$VERSION
      - docker push iofog/controller:rc-$VERSION
  - stage: release_deploy
    before_install:
      - sudo apt-get install sshpass
    script: skip
    before_deploy:
      - npm pack
    deploy:
      skip_cleanup: true
      provider: npm
      email: "${NPM_EMAIL_ADDRESS}"
      api_key: "${NPM_AUTH_TOKEN}"
      tag: latest
      on:
        branch: master
    after_deploy:
      - sshpass -p $PROD_MACHINE_PASSWORD ssh -o StrictHostKeyChecking=no $PROD_MACHINE_USERNAME@$PROD_MACHINE_IP
        "iofog-controller stop; npm update --unsafe-perm -g iofogcontroller; iofog-controller start"
      - export VERSION=`npm view iofogcontroller version`
      - docker build -t iofog/controller:latest --build-arg FILENAME=$(ls iofogcontroller-*.tgz) . -f Dockerfile.rel
      - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
      - docker push iofog/controller:latest
      - docker tag iofog/controller:latest iofog/controller:$VERSION
      - docker push iofog/controller:$VERSION
