{
	"info": {
		"_postman_id": "60e3f445-5489-456d-be89-c83939ef660d",
		"name": "Controller Testing",
		"description": "iofog-controller collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9a8a90e-4ee9-4896-b6f3-a18800ef7c52",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12adfea5-d80a-4c21-8bfd-1152280232f2",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Activation code not found\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activationCode\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/activate",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"activate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc70e3ec-2394-49b0-b47d-f935d80a8cf8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6292eaff-6493-44d8-91ab-1a7f638d8d2f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c21f7981-1ac1-4b80-a23b-59b22ecb32a5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend activation email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3439acc8-0aa5-4499-8944-e618d8542a82",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/user/signup/resend-activation?email=user@domain.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup",
								"resend-activation"
							],
							"query": [
								{
									"key": "email",
									"value": "user@domain.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93b04aa9-d7aa-480e-8f09-96c04386dd2a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39b0ef9d-f687-4807-89c8-d2426f7cbc13",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a09173c5-750c-48bc-a639-4ea40803d3af",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Saeid\",\n  \"lastName\": \"Rezaei\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "def0b490-3faa-4b86-82cc-df4f37da5803",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"#Bugs4Fun\",\n  \"newPassword\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22ef22db-69ca-4ea6-aa33-ebb9c4dad601",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "User collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "11f0b56f-2a5e-425d-8b37-1d0ea4cb2ad2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "91f4b0a0-284d-4d0d-a350-873243d678ba",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "General",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0055bb9-cc15-4aaf-8068-0a843814a5bb",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.status && data.hasOwnProperty('timestamp');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get email activation setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "170d7a2a-6753-47d2-abd3-6e4a073d8b12",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('isEmailActivationEnabled');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/email-activation",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"email-activation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fog types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cd7583c-ecad-4008-a2ac-6a38cc74b462",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.fogTypes;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/fog-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"fog-types"
							]
						}
					},
					"response": []
				}
			],
			"description": "General collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "647ee403-a7df-4bef-9a69-a08b13b0c8e3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8c6593bb-65c6-4049-a18a-5cf8b2ef7d6a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Agent",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "268a9828-082a-403a-9646-4b4d8819eb16",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba084a63-9054-444b-9573-df49a022c20f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcb50fb2-9f37-4546-b9c3-19e8942e4c92",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3bad932-6ff2-41ba-a61b-aa894c972368",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddc05725-7af2-44a9-a9d2-d4f6a9b42546",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "737198c4-3e5c-43ee-8863-48cf3a720fae",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.token;",
									"",
									"postman.setGlobalVariable(\"agent-token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"{{provisioning-key}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/provision",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e09f9bef-8ad4-44b1-936d-2ae4149e6ede",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.networkInterface && data.dockerUrl && data.hasOwnProperty('diskLimit') && data.diskDirectory",
									"&& data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit') ",
									"&& data.logDirectory && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('statusFrequency') && data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('latitude') && data.hasOwnProperty('longitude')",
									"&& data.hasOwnProperty('routerHost') && data.hasOwnProperty('routerPort')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d430fad6-ea6a-4756-bca7-e6fb648571df",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Image snapshot not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfd42d51-a0d4-4073-b418-b97ddc5c2aeb",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Invalid microservice UUID 'abcedf'\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices/abcedf",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices",
								"abcedf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3e8b271-2cf4-4a94-9b8a-42db540c6a47",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update hardware info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "448adfa1-17dc-496a-ba9c-37b5251dbe41",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update USB info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5817bf3-ea8e-4794-8a95-1019a46de0e7",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tracking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbfaa0e4-e122-4191-9dec-32d7767c7fe8",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{agent-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"events\": [\n        {\n            \"uuid\": \"test_tracking\",\n            \"sourceType\": \"agent\",\n            \"timestamp\": 1551694999,\n            \"type\": \"test\",\n            \"data\": {\n                \"event\":\"test\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/tracking",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tracking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0be7b25-efab-49ce-9057-2f263d24739f",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"straceData\": [\r\n    {\r\n      \"microserviceUuid\": \"abcdef\",\r\n      \"buffer\": \"test\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ef4ec2-9355-4fda-bacd-581fcd9ef745",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"daemonStatus\": \"RUNNING\",\r\n  \"daemonOperatingDuration\": 15,\r\n  \"daemonLastStart\": 25,\r\n  \"memoryUsage\": 16,\r\n  \"diskUsage\": 14,\r\n  \"cpuUsage\": 17,\r\n  \"memoryViolation\": true,\r\n  \"diskViolation\": true,\r\n  \"cpuViolation\": true,\r\n  \"microserviceStatus\": \"[]\",\r\n  \"repositoryCount\": 5,\r\n  \"repositoryStatus\": \"RUNNING\",\r\n  \"systemTime\": 155,\r\n  \"lastStatusTime\": 166,\r\n  \"ipAddress\": \"192.168.0.1\",\r\n  \"processedMessages\": 255,\r\n  \"microserviceMessageCounts\": \"counts\",\r\n  \"messageSpeed\": 52,\r\n  \"lastCommandTime\": 57,\r\n  \"tunnelStatus\": \"on\",\r\n  \"version\": \"1\",\r\n  \"isReadyToUpgrade\": true,\r\n  \"isReadyToRollback\": true\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8a10ab8-7edc-4aa8-8bd5-6882eb56790c",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"ValidationError\" && data.message === \"Invalid content type\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/zip"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df0188ea-0080-45a1-bb53-0c192b1884ad",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"networkInterface\": \"wlan0\",\r\n  \"dockerUrl\": \"http://google.com\",\r\n  \"diskLimit\": 15,\r\n  \"diskDirectory\": \"testDirectoryPath\",\r\n  \"memoryLimit\": 150,\r\n  \"cpuLimit\": 17,\r\n  \"logLimit\": 16,\r\n  \"logDirectory\": \"testLogPath\",\r\n  \"logFileCount\": 7,\r\n  \"statusFrequency\": 35,\r\n  \"changeFrequency\": 36,\r\n  \"deviceScanFrequency\": 37,\r\n  \"watchdogEnabled\": true,\r\n  \"latitude\": 22,\r\n  \"longitude\": 66,\r\n  \"gpsMode\": \"manual\",\r\n \"dockerPruningFrequency\": 35,\r\n  \"availableDiskThreshold\": 95,\r\n  \"logLevel\": \"INFO\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c80ec08-1bf0-4bc4-b7c5-4476626c8112",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('config') && data.hasOwnProperty('version') && data.hasOwnProperty('reboot')",
									"&& data.hasOwnProperty('deleteNode') && data.hasOwnProperty('microserviceList') && data.hasOwnProperty('microserviceConfig')",
									"&& data.hasOwnProperty('routing') && data.hasOwnProperty('registries') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('diagnostics')",
									"&& data.hasOwnProperty('isImageSnapshot') && data.hasOwnProperty('prune');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config/changes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config",
								"changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent tunnel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "606d163e-32f4-46d9-8229-342b9419c851",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Tunnel not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af9ce5a4-74c9-48c3-9fcd-93b37b5cd015",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.registries;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get change version command",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f382547-7663-413c-bb89-ea10a2c720e4",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Version command not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a9dcaf0-eebd-40ce-b15e-bf9c3af02596",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.microservices;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91d27f00-f7e4-4fdb-aaa0-9fedbf704867",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d203871f-9097-45a1-8f33-3c17e2015e70",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cef308f2-ba4a-4cd5-b331-1ce9122acb02",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Agent collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7b857ffe-462b-4577-bf62-104410c05f84",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d19123be-fd5b-4e1b-80da-12bdb932ec35",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e0af72a-4d00-4deb-84fd-afeba88f3437",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22279b70-3af3-42d4-96a1-3af53c66da74",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de062b28-de7b-4dde-b472-1f80a415b0bb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adba53f7-b8ff-47e6-bf14-76c0f76e94a2",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03159c3f-aa0c-4ba5-b0fa-5a83d4c9f826",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e7e3652-e99f-47cb-9689-05c1b3f00a9f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09c36766-f370-412d-8c4d-0c9266b3a116",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc2\"] = data.from === \"msvc-1\" && data.to === \"msvc-2\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ee0a31f-66aa-424b-9e0b-2b91f1550c4d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-3\",\n            \"name\": \"m1-2\"\n        },\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-1\",\n            \"name\": \"m1-1\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Application Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb87a027-014d-4e52-b8bd-cf949ff5aa34",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');",
									"",
									"tests[\"Routes are updated\"] = data.hasOwnProperty('routes') && data.routes.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47385890-d285-42fa-b950-8b6c6d7f67af",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc3\"] = data.from === \"msvc-1\" && data.to === \"msvc-3\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6bfb989-1386-4bca-8752-617567fd211f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');",
									"",
									"tests[\"Response returns microservice errorMessage\"] = data.microservices[0].status.hasOwnProperty('errorMessage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdf7b799-aead-4e31-b8d6-4027629d0014",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Description\",\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34687358-5404-4c57-99ca-2318c7bb3599",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');",
									"",
									"tests[\"Response returns microservice errorMessage\"] = data.microservices[0].status.hasOwnProperty('errorMessage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "219fbf2e-f100-4a75-9bdd-4389f4f056f1",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0c74515-d8a6-42b9-aab9-c17031cc30cd",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bde635d4-c27c-4741-9fb4-18556f6281f5",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"postman.setGlobalVariable(\"application-name\", \"application-name-22\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edeb01c1-7069-4586-a954-7f259a30c4f7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc06f178-4444-406a-a5b3-cca64c87a997",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5385e432-e353-4847-923c-3ebe1712c727",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "546e5a69-fd8e-4b22-b995-3bd36b90d6a0",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f56b5948-35b2-4a0b-b3c5-25c1e5469833",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c33801d-71d2-4524-a498-fa86c07f855b",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cedef1d7-c6d4-4783-a3f5-768a2389e075",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4d2ba5d-f63d-4908-8897-783f582d3272",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f857a4e-5010-4a2d-b3f3-f2de08a47981",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0ac22cb8-2c4b-45ba-ae3b-c96ec2a7af76",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9c60a5fb-aef7-4bd2-9c8a-30bbb22d358c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application Template",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "295fc361-7aa7-455d-8da5-d1fca0aa6c44",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58d44a8b-ae53-44d7-9456-a1e86bc255be",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e4ebb03-6b79-48b6-bb57-ed69e0979364",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30ff11ec-6021-421b-a7ab-a6ca5e2c7008",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e63493a-58a1-4b71-9c96-68441232329e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"if (tests[\"Response validation passed\"]) {",
									"    postman.setGlobalVariable(\"application-template-name\", data.name);",
									"    postman.setGlobalVariable(\"application-template-id\", data.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-template-name\",\n    \"variables\": [\n        {\n            \"key\": \"agent-1-name\",\n            \"description\": \"Agent name for msvc-1\"\n        },\n        {\n            \"key\": \"env-value-1\",\n            \"description\": \"ENV variable value for KEY1\"\n        },\n        {\n            \"key\": \"env-value-2\",\n            \"description\": \"ENV variable value for KEY2\",\n            \"defaultValue\": \"test42\"\n        }\n    ],\n    \"application\": {\n        \"microservices\": [\n            {\n                \"name\": \"msvc-1\",\n                \"config\": \"string\",\n                \"images\": [\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 1\n                    },\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 2\n                    }\n                ],\n                \"registryId\": 1,\n                \"agentName\": \"{{ agent-1-name }}\",\n                \"rootHostAccess\": true,\n                \"logSize\": 0,\n                \"volumeMappings\": [\n                    {\n                        \"hostDestination\": \"/var/dest\",\n                        \"containerDestination\": \"/var/dest\",\n                        \"accessMode\": \"rw\"\n                    }\n                ],\n                \"ports\": [],\n                \"routes\": [],\n                \"env\": [\n                    {\n                        \"key\": \"KEY1\",\n                        \"value\": \"{{ env-value-1 }}\"\n                    },\n                    {\n                        \"key\": \"KEY2\",\n                        \"value\": \"{{ env-value-2 }}\"\n                    }\n                ],\n                \"cmd\": [\n                    \"test\",\n                    \"--arg1\",\n                    \"--arg2\"\n                ]\n            },\n            {\n                \"name\": \"msvc-2\",\n                \"config\": \"string\",\n                \"images\": [\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 1\n                    },\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 2\n                    }\n                ],\n                \"registryId\": 1,\n                \"application\": \"{{application-name-2}}\",\n                \"iofogUuid\": \"{{node-id}}\",\n                \"rootHostAccess\": true,\n                \"logSize\": 0,\n                \"volumeMappings\": [\n                    {\n                        \"hostDestination\": \"/var/dest\",\n                        \"containerDestination\": \"/var/dest\",\n                        \"accessMode\": \"rw\"\n                    }\n                ],\n                \"ports\": [],\n                \"routes\": [],\n                \"env\": [\n                    {\n                        \"key\": \"KEY1\",\n                        \"value\": \"value1\"\n                    },\n                    {\n                        \"key\": \"KEY2\",\n                        \"value\": \"value2\"\n                    }\n                ],\n                \"cmd\": [\n                    \"test\",\n                    \"--arg1\",\n                    \"--arg2\"\n                ]\n            },\n            {\n                \"name\": \"msvc-3\",\n                \"config\": \"string\",\n                \"images\": [\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 1\n                    },\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 2\n                    }\n                ],\n                \"registryId\": 1,\n                \"application\": \"{{application-name-2}}\",\n                \"iofogUuid\": \"{{node-id}}\",\n                \"rootHostAccess\": true,\n                \"logSize\": 0,\n                \"volumeMappings\": [\n                    {\n                        \"hostDestination\": \"/var/dest\",\n                        \"containerDestination\": \"/var/dest\",\n                        \"accessMode\": \"rw\"\n                    }\n                ],\n                \"ports\": [],\n                \"routes\": [],\n                \"env\": [\n                    {\n                        \"key\": \"KEY1\",\n                        \"value\": \"value1\"\n                    },\n                    {\n                        \"key\": \"KEY2\",\n                        \"value\": \"value2\"\n                    }\n                ],\n                \"cmd\": [\n                    \"test\",\n                    \"--arg1\",\n                    \"--arg2\"\n                ]\n            }\n        ],\n        \"routes\": [\n            {\n                \"from\": \"msvc-1\",\n                \"to\": \"msvc-2\",\n                \"name\": \"m1-2\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/applicationTemplate",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"applicationTemplate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application Template metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0973c07-7bf8-4ecc-b163-6cbcb78f2163",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"if (tests[\"Status code is 204\"]) {",
									"    postman.setGlobalVariable(\"application-template-name\", \"application-template-22\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-template-22\",\n  \"description\": \"Description\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/applicationTemplate/{{application-template-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"applicationTemplate",
								"{{application-template-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application Template Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99d137d3-df85-4bb3-a1f9-c8811324ee3a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": [\n        {\n            \"key\": \"agent-1-name\",\n            \"description\": \"Agent name for msvc-1\"\n        },\n        {\n            \"key\": \"env-value-1\",\n            \"description\": \"ENV variable value for KEY1\"\n        },\n        {\n            \"key\": \"env-value-2\",\n            \"description\": \"ENV variable value for KEY2\",\n            \"defaultValue\": \"test42\"\n        }\n    ],\n    \"application\": {\n        \"microservices\": [\n            {\n                \"name\": \"msvc-1\",\n                \"config\": \"string\",\n                \"images\": [\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 1\n                    },\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 2\n                    }\n                ],\n                \"registryId\": 1,\n                \"agentName\": \"{{ agent-1-name }}\",\n                \"rootHostAccess\": true,\n                \"logSize\": 0,\n                \"volumeMappings\": [\n                    {\n                        \"hostDestination\": \"/var/dest\",\n                        \"containerDestination\": \"/var/dest\",\n                        \"accessMode\": \"rw\"\n                    }\n                ],\n                \"ports\": [],\n                \"routes\": [],\n                \"env\": [\n                    {\n                        \"key\": \"KEY1\",\n                        \"value\": \"{{ env-value-1 }}\"\n                    },\n                    {\n                        \"key\": \"KEY2\",\n                        \"value\": \"{{ env-value-2 }}\"\n                    }\n                ],\n                \"cmd\": [\n                    \"test\",\n                    \"--arg1\",\n                    \"--arg2\"\n                ]\n            },\n            {\n                \"name\": \"msvc-2\",\n                \"config\": \"string\",\n                \"images\": [\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 1\n                    },\n                    {\n                        \"containerImage\": \"hello-world\",\n                        \"fogTypeId\": 2\n                    }\n                ],\n                \"registryId\": 1,\n                \"application\": \"{{application-name-2}}\",\n                \"iofogUuid\": \"{{node-id}}\",\n                \"rootHostAccess\": true,\n                \"logSize\": 0,\n                \"volumeMappings\": [\n                    {\n                        \"hostDestination\": \"/var/dest\",\n                        \"containerDestination\": \"/var/dest\",\n                        \"accessMode\": \"rw\"\n                    }\n                ],\n                \"ports\": [],\n                \"routes\": [],\n                \"env\": [\n                    {\n                        \"key\": \"KEY1\",\n                        \"value\": \"value1\"\n                    },\n                    {\n                        \"key\": \"KEY2\",\n                        \"value\": \"value2\"\n                    }\n                ],\n                \"cmd\": [\n                    \"test\",\n                    \"--arg1\",\n                    \"--arg2\"\n                ]\n            }\n        ],\n        \"routes\": [\n            {\n                \"from\": \"msvc-1\",\n                \"to\": \"msvc-2\",\n                \"name\": \"m1-2\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/applicationTemplate/{{application-template-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"applicationTemplate",
								"{{application-template-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72cbe336-4944-483b-a520-84d369d08ba5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applicationTemplates') && data.applicationTemplates.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/applicationTemplates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"applicationTemplates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application Template By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddbdb199-3cc0-4f03-8e9f-71b82d44ea67",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('application');",
									"if (tests[\"Response validation passed\"]) {",
									"    const applicationData = data.application",
									"    tests[\"Application template is parsed properly\"] = applicationData.hasOwnProperty('microservices') && applicationData.microservices.length === 2 && applicationData.hasOwnProperty('routes') && applicationData.routes.length === 1;",
									"",
									"    tests[\"Application template has variables\"] = data.hasOwnProperty('variables') && data.variables.length === 3;",
									"    ",
									"    const templatedMsvc = applicationData.microservices.find(m => m.name === \"msvc-1\")",
									"    tests[\"Application variables are OK\"] = templatedMsvc.agentName = \"{{ agent-1-name }}\"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/applicationTemplate/{{application-template-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"applicationTemplate",
								"{{application-template-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deploy Application based on template",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "843cddf2-2fd0-4ab6-8feb-6d60c549e323",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"if (tests[\"Response validation passed\"]) {",
									"    postman.setGlobalVariable(\"application-name\", data.name);",
									"    postman.setGlobalVariable(\"application-id\", data.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-name\",\n    \"template\": {\n        \"name\": \"{{application-template-name}}\",\n        \"variables\": [\n            {\n                \"key\": \"agent-1-name\",\n                \"value\": \"string\"\n            },\n            {\n                \"key\": \"env-value-1\",\n                \"value\": \"12345\"\n            }\n        ]\n    },\n    \"isSystem\": false,\n    \"isActivated\": true,\n    \"description\": \"new application from template\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3caabaa3-d94c-479b-b962-d357158678b4",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');",
									"",
									"if (tests[\"Response validation passed\"]) {",
									"    const msvc = data.microservices.find(m => m.name ===  \"msvc-1-\" + pm.globals.get(\"application-name\"));",
									"    tests[\"Agent uuid was converted properly\"] = msvc.iofogUuid === pm.globals.get(\"node-id\");",
									"    postman.setGlobalVariable(\"application-msvc-uuid\", msvc.uuid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Msvc By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9692e9e2-808f-4a4e-a5c1-5ce2af93a59d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('uuid') && data.name;",
									"",
									"if (tests[\"Response validation passed\"]) {",
									"    const env1 = data.env.find(e => e.key === \"KEY1\")",
									"    const env2 = data.env.find(e => e.key === \"KEY2\")",
									"    tests[\"Env variable were parsed properly\"] = env1.value === \"12345\" && env2.value === \"test42\";",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{application-msvc-uuid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{application-msvc-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "093610d5-07a3-43a6-86b9-b6cfc8e99d2a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d54ee76-545d-4aa1-bcf1-792dc43bab19",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/applicationTemplate/{{application-template-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"applicationTemplate",
								"{{application-template-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "043f7a4b-a965-42d7-9ffb-ff609ee93ebf",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88ffce05-a09d-4fc9-b170-a584379c3b2b",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc198aa6-3d8c-45b4-adee-4881a81ca026",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9b43604b-669c-47f4-be02-531d0d1502e2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "89c6b8de-ec94-418d-a179-dad760852ad8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application with template",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d92a38ae-b0f7-4d80-b00a-c2733383e362",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "947e07e1-119c-421d-aec7-3b0d87f06f1b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d895766-9e22-4de8-a1ce-a4e4cde8b37b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7be8f3b3-6e46-4258-9c9f-fe0bcda56c5a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id-1\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"node1\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acad3a59-4ad6-4cf8-b28a-8c6c7f57ca4a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id-2\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"node2\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"host\": \"1.2.3.5\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c405e650-ecdd-4095-8249-7ab6faf248e2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            },\n            {\n                \"name\": \"version\",\n                \"url\": \"https://localhost:91121/version\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18104fa4-615c-4e23-8ebd-d9630ad7cd75",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name-1\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-name-1\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"redistest\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"redis\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"redis\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-name-1\",\n            \"iofogUuid\": \"{{node-id-1}}\",\n            \"rootHostAccess\": false,\n            \"logSize\": 0,\n            \"volumeMappings\": [],\n            \"ports\": [\n                 {\n                    \"internal\": 6379,\n                    \"external\": 6379,\n                    \"publicMode\": false\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72096466-2d93-45e7-ad4b-50dd7643b64e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-name-2\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-msvc-name\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [\n                {\n                    \"internal\": 1881,\n                    \"external\": 1882\n                }\n            ],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"sekrittoken\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"http://myproxy:8080/\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-msvc-name\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\", \\\"sharedToken\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"rulesengineHOST\",\n                    \"value\": \"{%  assign curmsvc= self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first %}{{ curmsvc | findAgent: agents | map: \\\"host\\\" }}\"\n                },\n                {\n                    \"key\": \"rulesenginePORT\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"ports\\\" | first | map: \\\"external\\\" | first }}\"\n                },\n                {\n                    \"key\": \"redisHost\",\n                    \"value\": \"{% assign redismsvc = microservices | where: \\\"name\\\", \\\"redistest\\\" | first %}{{ redismsvc | findAgent: agents | map: \\\"host\\\"}}:{{ redismsvc | map: \\\"ports\\\" | first | first |map: \\\"external\\\" | first }}\"\n                },\n                {\n                    \"key\": \"edgeResLiveness\",\n                    \"value\": \"{{ \\\"com.orange.smart-door\\\" | findEdgeResource: \\\"0.0.1\\\" | map: \\\"interface\\\" | map: \\\"endpoints\\\" | first  | where: \\\"name\\\", \\\"liveness\\\" | first | map: \\\"url\\\" }}\"\n                },\n                {\n                    \"key\": \"edgeResVersion\",\n                    \"value\": \"{{ \\\"com.orange.smart-door\\\" | findEdgeResource            | map: \\\"interface\\\" | map: \\\"endpoints\\\" | first  | where: \\\"name\\\", \\\"version\\\" | first | map: \\\"url\\\" }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-msvc-name\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a41161ef-1129-49fa-8f9d-58df643c37fe",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');",
									"",
									"tests[\"Response returns microservice errorMessage\"] = data.microservices[0].status.hasOwnProperty('errorMessage');",
									"",
									"tests[\"msv1 gets env application name\"]=data.microservices[0].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv1 sets env value from another\"]=data.microservices[0].env[3].value === data.microservices[0].env[2].value",
									"",
									"tests[\"msv2 gets env application name\"]=data.microservices[1].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv2 sets env value from env service msvc1\"]=data.microservices[1].env[1].value === data.microservices[0].env[1].value",
									"tests[\"msv2 sets env value from service msvc1\"]=data.microservices[1].env[5].value === data.microservices[0].ports[0].external.toString()",
									"",
									"tests[\"msv2 gets hostname from iofog agent for itself\"]=data.microservices[1].env[4].value === '1.2.3.5'",
									"tests[\"msv2 gets hostname from iofog agent for a service of another app\"]=data.microservices[1].env[6].value === '1.2.3.4:6379'",
									"tests[\"msv2 gets edge Resource liveness endpoint\"]=data.microservices[1].env[7].value === 'https://localhost:91121'",
									"tests[\"msv2 gets edge Resource version endpoint (without version for findEdgeResource)\"]=data.microservices[1].env[8].value === 'https://localhost:91121/version'",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c0c7056-039d-4039-8b5d-005258254e7a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6dacb5-e141-4374-9046-a211222cba4e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc8a2754-646a-42eb-9fcb-41d4eac8ce11",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"postman.setGlobalVariable(\"application-name\", \"application-name-22\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fde264af-1841-462e-b0c7-d4cc8ffa5735",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b932c36-96c5-4429-a263-11356bdc51b6",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5846a630-ef6a-4ff8-8fec-6a4d0695c901",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97e3985f-6309-4434-895e-7832c4d0e2be",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94471a93-6066-423e-a087-fa6b815ce7c2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ee8826f-783f-4fc6-b716-769c92da9c2a",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0655bc4-747c-4b8b-8f41-e98059e4b397",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88315a01-1582-4114-846f-4ea92463c1cb",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d04af405-279d-4c3f-bf88-2962bc3d6635",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b23ed94a-36bb-48ee-bdce-1c2cb9560066",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id-1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id-1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5771e1de-cc40-4a92-9298-be8b163cb598",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "28aa7645-0d04-4992-b4e6-bf3dede1edc4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ec0877d5-de4c-440e-92ba-a5fcf7c020fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Flow",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01f71482-c3b6-41e4-b76c-a7c592c6cc62",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14d8151f-0ef7-4aed-abbb-379fdcf5e77a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "416063d5-7fe6-4c48-b95d-de71e782bc89",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4ece4e5-d656-499b-acf6-0428a0de1235",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flow By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d759adf-8e83-4c6f-96b3-b41fb3a4e3a0",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94be9e00-d3e9-48b0-8c0b-baae1e7db0da",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52654564-74a8-4ecb-a121-0e8295080fa8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65478c0e-9fa0-43ae-88fd-4c6b580e4417",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94aa5e6a-bfea-42a9-964d-4e9185fb6816",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Flow collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d014208f-ef0c-42a3-8d3a-15b5a8b2d21c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "74317ec8-f2b1-48d0-827d-08ef94bdb710",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10721fef-11bd-41f5-a696-a5f150e8390f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d44e3204-ee5c-4879-9bfd-6cb3d8f011c6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfa01fb2-bba2-45c5-a316-2fef7e4d9579",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9e0e82a-a803-42b1-860f-54af7a8b47b2",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45ba2f81-dcf1-4054-a96d-8a20220bbf82",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3493fd7-d6e2-4452-89a2-a51532eeeba6",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id-2\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14d2a04d-4111-4e56-9db0-8c54a5b2e9f6",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2ec0b36-d577-4192-a72c-c4f574148e75",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15204380-3d63-4f5f-be40-8a3c71d727d8",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id-2}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "254cf586-01ff-4170-baef-925d53b639da",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f67163fd-9218-4c04-aabb-0dea42ef9a53",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "547c2f46-2c50-4984-bc8d-4f7194facd79",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c68382a4-1dde-46ad-9438-3b8c2ef8e157",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6502e77-0f8e-48e0-8a45-91da3f3cadc1",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "811558ce-d7ad-4caa-9fde-cecf14f02874",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');",
									"",
									"tests[\"Response returns microservice errorMessage\"] = data.microservices[0].status.hasOwnProperty('errorMessage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?flowId={{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "flowId",
									"value": "{{flow-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f74ca7b2-7037-45de-93d0-22b89d5e2b43",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26378c4d-f204-4bd3-82a6-403630d60c59",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d32d0b77-2d14-453b-b001-a7e8c2129767",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8653ab6-dbd6-432c-9676-66aa08344d75",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"images\": [\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 1\n        },\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 2\n        }\n    ],\n    \"registryId\": 2,\n    \"config\": \"string\",\n    \"rebuild\": true,\n    \"iofogUuid\": \"{{node-id}}\",\n    \"rootHostAccess\": true,\n    \"logSize\": 0,\n    \"volumeMappings\": [\n        {\n            \"hostDestination\": \"/var/dest\",\n            \"containerDestination\": \"/var/dest\",\n            \"accessMode\": \"rw\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1714a2f-f4f3-4558-a7e2-964fca6a3e82",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e953cc35-f3d4-4bcb-9d3f-4414fb8a3708",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12ff60f9-91ff-4e02-a383-a348c753843f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f8baa80-62cb-45fb-a2e9-a3e6de5b0d1c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"images\": [\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 1\n        },\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 2\n        }\n    ],\n    \"registryId\": 2,\n    \"catalogItemId\": null,\n    \"config\": \"string\",\n    \"rebuild\": true,\n    \"iofogUuid\": \"{{node-id}}\",\n    \"rootHostAccess\": true,\n    \"logSize\": 0,\n    \"volumeMappings\": [\n        {\n            \"hostDestination\": \"/var/dest\",\n            \"containerDestination\": \"/var/dest\",\n            \"accessMode\": \"rw\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55a6b6d9-e1ae-4888-a1ba-80cdeb3dbb40",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbbe32c1-57e6-48f5-9240-d0557845371e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n\"sourceMicroserviceUuid\": \"{{ms-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\",\n \"name\": \"my-route\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bab469c-8cfa-473f-8347-1b6f598ee521",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12356a5d-3502-4901-8e25-f7b0cb485da7",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba88f981-3729-46d9-a5e6-8cf8cf928e44",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "daff41d7-3305-445d-8b0c-9cad5026ce81",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58500424-b7e3-46cd-bb6a-5130215625b9",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ed5475a-3465-4d18-8079-44765096f481",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4bc8d02-9b2e-40ab-823d-2c6e94c83a73",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15e3a00b-09f4-460b-b7e4-f7bbf39cd8ca",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea71e179-85bf-4866-815e-bc3b51954a75",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94f032ec-51cd-4f9c-9a3b-9cf7345a3123",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47917bf1-89a5-406c-98dc-851126886006",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ffbd66-58b9-4a8c-897f-c722e6e2c730",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53fd9998-ca8b-4c9f-9e8b-915c0df52063",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5020b01b-ebba-45fe-9bbc-8082d784e8ad",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bf754129-e7c0-49e9-9c0a-c493a6368aad",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Catalog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d614ff70-93e2-48f5-81a9-7499967b6c5a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4411b2fd-9910-4bf7-bd4d-f28aa7313c04",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cfff2c-1c26-4d5e-893b-97263bf17814",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1689cd7-9f37-4eb0-951a-3c4ceeee0355",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('catalogItems');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c064e0e-7902-441d-bd99-fe736a46d07b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.category && data.hasOwnProperty('configExample')",
									"&& data.publisher && data.hasOwnProperty('diskRequired') && data.hasOwnProperty('ramRequired') && data.picture && data.hasOwnProperty('isPublic')",
									"&& data.hasOwnProperty('registryId') && data.hasOwnProperty('images') && data.hasOwnProperty('inputType') && data.hasOwnProperty('outputType');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b278beb0-b44a-4d0f-b543-9de37061a0ab",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8a47ccb-8596-413c-ae83-8197b32d137f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3c72e37-7eb9-4d52-839b-284f1a49e5ec",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Catalog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a14d66b6-6878-4866-b86c-2b5916db221a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "323a7734-3aaa-48e1-b70e-4be473fdf352",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tunnel",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a3c6506-42c8-4878-972c-d24efa0e95cd",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bb7b7af-44ca-4466-9797-57512ec6ecb4",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a08d232a-5ba5-4baa-afaa-5ab643401897",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "178d50f1-fabf-42a6-8192-2cc22616d121",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"dockerPruningFrequency\": 35,\n  \"availableDiskThreshold\": 95,\n  \"logLevel\": \"INFO\"\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4bb043a5-a357-40e3-b7dd-89fbcd0c69ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"open\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node SSH Tunnel Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7748a09f-10a5-4f8d-8c82-08cfa5f59207",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98dad9a8-b280-47a1-8c38-d0b6e22e0685",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"close\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0150cb40-1548-4b0e-a87d-d721a34cde54",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff81d70e-3e57-4a8d-8dca-da1c07eef637",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "369cbd79-ac59-496c-865d-b921aa84ce2a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tunnel collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "064a1c4a-88e4-4f4c-ae88-9ce5e30c64d3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b57fe14b-d1c7-4c47-8665-622676065f8d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa61abd0-40dd-4158-9065-ef972efde023",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e11b75f-e879-46e6-a146-670d3d4ff894",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eade90df-14f0-46c1-b5f1-32d08e746cab",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5032db2f-55b5-457b-b5ac-f84d78a4b379",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aecb8963-ef46-4836-9702-99f47707f8e6",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93d62667-f26b-41be-9b6a-b634938d502f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name-2\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9859f80-72c0-4486-94b8-88d78d98c775",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0e81a89-2ee6-41f1-9f73-447545dae482",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-name\", data.name);",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a795aa0a-9acc-4521-8147-af5cef2f9af9",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name-2}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30b04d02-ebcc-4580-aa9b-349d1690c156",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-name\", data.name);",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2d3eeef-2116-429a-95d5-05e6b1dbf6dc",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "867238b5-fcf2-4d3e-b677-7aeac61c215a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cae9b888-4864-4beb-9bc6-5aa340a8befd",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3314e8c-4613-470c-bdd7-856e1439d10d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7a12cb5-224d-4e16-8152-4cedf20f8d1a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');",
									"",
									"tests[\"Response returns microservice errorMessage\"] = data.microservices[0].status.hasOwnProperty('errorMessage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "131897d7-fa11-4128-9349-b639da5b4768",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbef4a1b-d2bf-4c0a-96cf-073b44a89798",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a5700d3-a8e9-4264-87be-3f72ca222d49",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d97dd0f0-1cc8-4b6f-854f-2533df615443",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"",
									"postman.setGlobalVariable(\"ms-name\", \"name3\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe3f9001-5f55-4826-9162-2caa4e79e69a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69495ecb-e40c-471e-a2d8-fa1225b7ced3",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86bb5c56-5fe4-40ec-9911-a1db09b8b637",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f170ad9-a7e7-4a98-9e76-21f2eb07b2d7",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"catalogItemId\": null,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "baa35864-fbd5-4333-af60-5ef39360cdef",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3366210-3c7a-4df1-89e0-ee9b21b22b0e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"from\": \"{{ms-name}}\",\n \"to\": \"{{ms-name}}\",\n \"name\": \"my-route\",\n \"application\": \"{{application-name}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4504343-fcc5-44ce-b059-36d828f0e7ea",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9541f55b-f6d2-445b-80b2-401f30950754",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45792d99-4be7-4b42-8850-63a86eb63a6b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e12f137-50ec-46a1-9ffd-f58d65693499",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e968be92-8ff3-4da8-9663-fbcaf859f25c",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78af6d0d-5690-4632-8427-4f211c727e4e",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bb51ea6-d721-472e-b24e-209a27f949e4",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d60d06b-7065-47c8-bd66-dd305193a643",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1a652fa-3d08-4976-8cfd-d197baa0fb7d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9141a208-49b6-4d27-b3e9-6fa36b1b21b2",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8eb591c-2b4b-4f17-ba7c-c97257dbc032",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f80e1e0b-1b2d-4390-b33a-e5270fb82209",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f4ff737-d8ad-4cf0-af8c-7a599dd5e2de",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d973f28f-a776-4002-9315-df7c4c3b2762",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "27691462-b5ec-408c-860b-e533b82c9739",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Diagnostics",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16a11ca6-6dae-4f7e-aca6-a3bc99adbeb3",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "601edcec-2eb8-4528-98d6-54ed0a6c234d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8e96dd5-c07d-4da0-b4a2-802f9deedaa6",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04c79e04-287e-4fe6-8623-1e5ffaf40f8e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6178991b-6de9-46cb-b252-d1c6f9c8969b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66b5b130-f011-4e3a-8064-5aa94261ccbf",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a52c57a2-63cc-4338-be13-5d77afb78af9",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request to Create Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5741bd3a-3fcd-4517-bd56-56cc66b62db8",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9fb83f2-34a9-4000-b2a0-db7f4031a8a2",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === 'ValidationError' && data.message === 'Image snapshot is not available for this microservice.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable/Disable Microservice Strace Option",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "452847b3-abc1-48ee-bc90-bbcb196c0e89",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enable\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Strace Data to FTP Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af2e872b-c5d8-4077-947f-8e01f4d8776b",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ftpHost\": \"string\",\n  \"ftpPort\": 0,\n  \"ftpUser\": \"string\",\n  \"ftpPass\": \"string\",\n  \"ftpDestDir\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Strace Data For Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b80e56a1-60b9-4d51-93f5-135262087f45",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('data');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace?format=string",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							],
							"query": [
								{
									"key": "format",
									"value": "string"
								}
							]
						},
						"description": "available formats:\n\t- string\n\t- file"
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c97169e6-7424-4215-9f23-dce839fdf038",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}?withCleanUp=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							],
							"query": [
								{
									"key": "withCleanUp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22987862-8058-435e-8880-bf9a5d352c5a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a488357-c6e4-4a7c-85d5-70d4940e1df0",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93840001-3ca4-4ae1-8f58-b91b4cf66e67",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c305a50c-722d-46e2-b392-cca1d9cb02f9",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc5c7948-e034-436a-9770-77adee0cf9f6",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Diagnostics collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0c3b3349-ff8f-4b05-b02e-8b61dc129fee",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "048264fc-82f2-497a-9427-6e82b6462b2d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ioFog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b035581f-a594-4eef-ba4b-94b51618d8c1",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd39b7e2-f27a-4dab-a292-7b38e1f432a1",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00a6aad1-9cc8-496d-b615-1bd5bf086bed",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3ee39d1-f0b8-49fe-aec5-235b15452e26",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfe9df1f-6e29-4d80-9224-439d3500f49c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "List ioFog Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5816e71-ac67-4afc-8f24-6632fbab2677",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf8bd0d8-7a0c-4c77-84ba-99324349857c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"isSystem\": false,\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List system fogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31dd1d85-5d7e-4cd5-99e7-e8eb96233ba9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?system=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "system",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ce5989-1e26-422a-8c97-d7d31c916700",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.name && data.location && data.hasOwnProperty('gpsMode') && data.hasOwnProperty('latitude')",
									"&& data.hasOwnProperty('longitude') && data.description && data.hasOwnProperty('lastActive') && data.daemonStatus && data.hasOwnProperty('daemonOperatingDuration') ",
									"&& data.hasOwnProperty('daemonLastStart') && data.hasOwnProperty('memoryUsage') && data.hasOwnProperty('diskUsage') && data.hasOwnProperty('cpuUsage') ",
									"&& data.hasOwnProperty('memoryViolation') && data.hasOwnProperty('diskViolation') && data.hasOwnProperty('cpuViolation') && data.hasOwnProperty('catalogItemStatus')",
									"&& data.hasOwnProperty('repositoryCount') && data.hasOwnProperty('repositoryStatus') && data.hasOwnProperty('systemTime') && data.hasOwnProperty('lastStatusTime')",
									"&& data.hasOwnProperty('ipAddress') && data.hasOwnProperty('processedMessages') && data.hasOwnProperty('catalogItemMessageCounts') && data.hasOwnProperty('messageSpeed')",
									"&& data.hasOwnProperty('lastCommandTime') && data.hasOwnProperty('networkInterface') && data.hasOwnProperty('dockerUrl') && data.hasOwnProperty('diskLimit')",
									"&& data.hasOwnProperty('diskDirectory') && data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit')",
									"&& data.logDirectory && data.hasOwnProperty('bluetoothEnabled') && data.hasOwnProperty('abstractedHardwareEnabled') && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('version') && data.hasOwnProperty('isReadyToUpgrade') && data.hasOwnProperty('isReadyToRollback') && data.hasOwnProperty('statusFrequency')",
									"&& data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId')",
									"&& data.hasOwnProperty('logLevel') && data.hasOwnProperty('dockerPruningFrequency')",
									"&& data.hasOwnProperty('availableDiskThreshold')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId') && data.hasOwnProperty('isSystem');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node Version Command rollback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5880fc96-e4d1-4cb7-a653-e650171a0043",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === 'ValidationError' && data.message === 'Can\\'t rollback version now. There are no backups on agent';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/rollback",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"rollback"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Node Version Command upgrade",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3180ff76-e264-4dc3-a33d-7d194bc72b24",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/upgrade",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"upgrade"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Reboot Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afc9b060-7f4f-4caa-88df-3175140d4210",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/reboot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"reboot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prune Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5c83fb0-9273-4f57-b6ee-6fd7c610aa6d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/prune",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"prune"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL Hardware Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "982629e2-0e2b-4812-be80-95d5308c1a3e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL USB Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2408ed1-6464-4937-961c-165acf84469d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22bb2614-017a-41b4-a6c6-6e165d8eb33a",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3573a693-fe97-4ea5-a827-ac2be60ad8bd",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Node Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d284657f-245a-44ec-93eb-2cedfa23068a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response does not contain any node\"] = data.hasOwnProperty('fogs') && data.fogs.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c903908-c2c1-4027-97eb-bc8585f7b50a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "ioFog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e7522c68-8bf5-4b8e-9f88-37165adf7f68",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9ac237d6-61dc-4585-9586-a77f54b98c80",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Registries",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "242cc556-5edb-482f-90bc-731fb00421c2",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56b4cf98-386e-475d-9063-80d3d58bc0c5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d60dbe4-7825-4058-afa2-5639f983a430",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"reg-id\", data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string\",\n  \"isPublic\": true,\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"email\": \"test@gmail.com\",\n  \"requiresCert\": false,\n  \"certificate\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2a7e3fb-a4a9-4ba8-96c3-0cf20dcb76db",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string2\",\n  \"isPublic\": true,\n  \"username\": \"string3\",\n  \"password\": \"string4\",\n  \"email\": \"test2@gmail.com\",\n  \"requiresCert\": true,\n  \"certificate\": \"string6\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69d6b8b2-9594-4954-8cf4-c766d6e53963",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('registries');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7393ad01-a7db-4a56-94f3-8a80d2c7cb46",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c051850-9b16-4f38-8fc5-a13cbc4e565c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Registries collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72841908-06a1-4369-9ba7-18a8687aca42",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fc77930e-43b1-469d-b8ab-eee9c1392f97",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Edge Resources",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cda3db17-c88d-4ea3-994b-99008f6a68bc",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff23953a-3531-442b-a354-13f0a1760fda",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a6eb1d6-6078-4f38-bee5-7c96984b3940",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ecf81a5-7b13-4253-afa0-2b5234b02f64",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									"postman.setGlobalVariable(\"node-name\", data.name);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f49cf4b2-8f79-475b-b538-b807bc6ee50f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3816d42d-2486-4a08-9439-697363d92be2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.token;",
									"",
									"postman.setGlobalVariable(\"agent-token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"{{provisioning-key}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/provision",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37d97fff-36ad-4051-8f54-e7b5b34dc328",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Edge Resource (different version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aeb77e70-cc52-407f-9cec-fea837a66126",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.2\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a87ddf24-a558-4b5d-b534-931d7b2b3e45",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (tests[\"Status code is 200\"]) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door2\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door2\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            },\n            {\n                \"name\": \"version\",\n                \"url\": \"https://localhost:91121/version\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\",\n        \"smart-door-v0.0.1\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd24bc77-5726-4d52-8f6d-98de07d23313",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door\");",
									"",
									"if (tests[\"Status code is 200\"]) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f3539c9-141d-4305-91b0-5c488310e0bb",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains metadata\"] = data.name && data.display && data.display.color && data.display.icon && data.display.name && data.interfaceProtocol && data.interfaceProtocol;",
									"",
									"tests[\"Has interface details\"] = data.interface && data.interface.endpoints && data.interface.endpoints.length === 2",
									"tests[\"Has orchestration tags\"] = data.orchestrationTags && data.orchestrationTags.length === 3"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbfa1ac2-bb3e-4f12-9d85-929a82d4e332",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uuid\": \"{{node-id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}/link",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de0f2db8-9fb3-4c5b-a5b7-61d9af9cf3fe",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('linkedEdgeResources') && data.linkedEdgeResources === true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config/changes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config",
								"changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent linked Edge resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c7b81f4-7cc1-4454-bc84-23d3d565a7db",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 1",
									"",
									"if (tests[\"Contains edgeResources\"]) {",
									"    var edgeResource = data.edgeResources[0] ",
									"",
									"    tests[\"Has display information\"] = edgeResource.display && edgeResource.display.name",
									"    tests[\"Has interface\"] = edgeResource.interface && edgeResource.interface.endpoints.length > 0",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/edgeResources",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"edgeResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge resource associated to Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd5adcc9-9471-46fa-aaf1-c97416026377",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 1",
									"",
									"if (tests[\"Contains edgeResources\"]) {",
									"    var edgeResource = data.edgeResources[0] ",
									"",
									"    tests[\"Has display information\"] = edgeResource.display && edgeResource.display.name",
									"    tests[\"Has tags\"] = data.tags && data.tags.length === 3",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlink Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9815706f-377f-4953-b5d4-d3de4499b957",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uuid\": \"{{node-id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}/link",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge resource associated to Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3686ef69-77ca-4f5f-924e-449a9f1cfc52",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 0",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Edge Resource version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64235311-8eaf-4627-9977-611af8944ba0",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version-2\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.2\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Edge Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34f5541b-5861-4ac2-b6c8-0eb60ee6e5e6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains 2 resources\"] = data.edgeResources && data.edgeResources.length === 2"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResources",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Edge Resources versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d503d96-c27a-406d-b48e-4bef013f013d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains 2 resources\"] = data.edgeResources && data.edgeResources.length === 2",
									"",
									"data = data.edgeResources[0]",
									"",
									"tests[\"Contains metadata\"] = data.name && data.display && data.display.color && data.display.icon && data.display.name && data.interfaceProtocol && data.interfaceProtocol;",
									"",
									"tests[\"Has interface details\"] = data.interface && data.interface.endpoints && data.interface.endpoints.length === 2",
									"tests[\"Has orchestration tags\"] = data.orchestrationTags && data.orchestrationTags.length === 3"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Edge Resource V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "429cbf33-145b-41b4-a5fe-e8495f1f983d",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0808bd59-743e-4e95-8ac4-426f79a7ed15",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "521f1396-c46e-4820-bdf0-c487c4c8d268",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d917125-641a-43d5-8a51-d0fe859090a2",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec2ce666-0b14-44f7-9853-2f6a5de56efb",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Capabilities",
			"item": [
				{
					"name": "Controller is EdgeResource capable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f12d5bec-2983-4c53-940e-41ef6eedfc3b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/capabilities/edgeResources",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"capabilities",
								"edgeResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Controller is Application Template capable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1b2f7a6-875f-4161-92bc-b73611ff720f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/capabilities/applicationTemplates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"capabilities",
								"applicationTemplates"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "57f22eeb-d7dd-44da-a85a-3f024e88bb77",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a2c0759c-2cf2-4db2-b0c8-b182c9889d78",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "45b5e888-3fa5-4089-9b5f-fc18ba018481",
			"key": "host",
			"value": "127.0.0.1:51121",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}