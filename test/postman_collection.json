{
	"info": {
		"_postman_id": "80b6ad98-d40f-44e9-9117-70c8d991d5a1",
		"name": "Controller Testing",
		"description": "iofog-controller collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91a1dac9-b03c-4411-b4ab-2b5214c5c397",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9fd564e-d599-49ee-bbcf-3827d861bec3",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Activation code not found\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activationCode\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/activate",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"activate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5960f3cb-886f-4a24-8a42-58fce9e865c7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b59b018-c3c6-489c-a7d0-6bf709adb61d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c189554f-aa34-4e3b-b184-96c611b9a0f1",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend activation email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff60db45-ca9e-448f-84c4-0227fa306ed2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/user/signup/resend-activation?email=user@domain.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup",
								"resend-activation"
							],
							"query": [
								{
									"key": "email",
									"value": "user@domain.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "489aa49c-4b71-4496-92b2-8501906aa8ca",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3dd9b61-5c01-4ffd-8131-9e50ff97d109",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b44e0fa-efd1-45f0-a56c-80bbc3a2d1e9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Saeid\",\n  \"lastName\": \"Rezaei\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46261d52-2678-4ff8-a3de-078c0c2fa55b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"#Bugs4Fun\",\n  \"newPassword\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e207bc0-e573-4805-8bc5-70c55a7ad351",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "User collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bae78438-ed43-455d-a0a8-d2957c1687bf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0bffbd53-85c0-4354-abb3-73e4c6b639b2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "General",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d3a4b48-477a-4529-901a-ee5c9b2cfda2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.status && data.hasOwnProperty('timestamp');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get email activation setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "525eb51f-6b06-41ca-a66d-268579a560e5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('isEmailActivationEnabled');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/email-activation",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"email-activation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fog types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cc09f6e-7177-4995-ad52-cc9d87c2b8a3",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.fogTypes;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/fog-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"fog-types"
							]
						}
					},
					"response": []
				}
			],
			"description": "General collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0a2ce333-3569-4d6a-b20b-577fd64285f1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "38e19ed9-d674-428b-977f-7e460430c6c9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Agent",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d4528de-417e-4d79-80da-3040963b8152",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "258a0169-04f1-4ec4-9164-999e4c91fcd9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41797822-b8de-445b-9edd-1c0daf522c9c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f06f60cd-2bdc-42a5-9227-6ee8ef73e6ab",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52fbd7ed-d5cc-417c-bb98-44e162ebcf5a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a829c028-7115-48f6-95ac-97836fc1684d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.token;",
									"",
									"postman.setGlobalVariable(\"agent-token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"{{provisioning-key}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/provision",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18605f39-44ae-456a-9525-513613abc60c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.networkInterface && data.dockerUrl && data.hasOwnProperty('diskLimit') && data.diskDirectory",
									"&& data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit') ",
									"&& data.logDirectory && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('statusFrequency') && data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('latitude') && data.hasOwnProperty('longitude')",
									"&& data.hasOwnProperty('routerHost') && data.hasOwnProperty('routerPort')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81aaa9b2-3193-4036-803f-24b043a65d94",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Image snapshot not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b34cd11-4bc9-4187-b684-a154778bf7fa",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Invalid microservice UUID 'abcedf'\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices/abcedf",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices",
								"abcedf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93e6ccf3-3277-4dc0-bbc9-36bbcd7da4b6",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update hardware info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74478051-b7e1-4b45-81af-d575732ccaaf",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update USB info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "584398b8-ce2b-45e8-bcf8-7f6aa8e96638",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tracking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a90d08f-e78e-434c-8f62-04fe7d745580",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{agent-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"events\": [\n        {\n            \"uuid\": \"test_tracking\",\n            \"sourceType\": \"agent\",\n            \"timestamp\": 1551694999,\n            \"type\": \"test\",\n            \"data\": {\n                \"event\":\"test\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/tracking",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tracking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "050e166e-5e7e-4bb3-a4b3-afd66995dd59",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"straceData\": [\r\n    {\r\n      \"microserviceUuid\": \"abcdef\",\r\n      \"buffer\": \"test\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c72c1f2-33ef-4463-9adb-d284402be81c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"daemonStatus\": \"RUNNING\",\r\n  \"daemonOperatingDuration\": 15,\r\n  \"daemonLastStart\": 25,\r\n  \"memoryUsage\": 16,\r\n  \"diskUsage\": 14,\r\n  \"cpuUsage\": 17,\r\n  \"memoryViolation\": true,\r\n  \"diskViolation\": true,\r\n  \"cpuViolation\": true,\r\n  \"microserviceStatus\": \"[]\",\r\n  \"repositoryCount\": 5,\r\n  \"repositoryStatus\": \"RUNNING\",\r\n  \"systemTime\": 155,\r\n  \"lastStatusTime\": 166,\r\n  \"ipAddress\": \"192.168.0.1\",\r\n  \"processedMessages\": 255,\r\n  \"microserviceMessageCounts\": \"counts\",\r\n  \"messageSpeed\": 52,\r\n  \"lastCommandTime\": 57,\r\n  \"tunnelStatus\": \"on\",\r\n  \"version\": \"1\",\r\n  \"isReadyToUpgrade\": true,\r\n  \"isReadyToRollback\": true\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a83784f7-b3e9-4304-a2c0-a83c7b1fb63e",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"ValidationError\" && data.message === \"Invalid content type\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/zip"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab893fe8-959f-4397-8423-bd7d1bbaa29b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"networkInterface\": \"wlan0\",\r\n  \"dockerUrl\": \"http://google.com\",\r\n  \"diskLimit\": 15,\r\n  \"diskDirectory\": \"testDirectoryPath\",\r\n  \"memoryLimit\": 150,\r\n  \"cpuLimit\": 17,\r\n  \"logLimit\": 16,\r\n  \"logDirectory\": \"testLogPath\",\r\n  \"logFileCount\": 7,\r\n  \"statusFrequency\": 35,\r\n  \"changeFrequency\": 36,\r\n  \"deviceScanFrequency\": 37,\r\n  \"watchdogEnabled\": true,\r\n  \"latitude\": 22,\r\n  \"longitude\": 66,\r\n  \"gpsMode\": \"manual\",\r\n \"dockerPruningFrequency\": 35,\r\n  \"availableDiskThreshold\": 95,\r\n  \"logLevel\": \"INFO\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3e19898-be22-4214-859b-048bc4832de8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('config') && data.hasOwnProperty('version') && data.hasOwnProperty('reboot')",
									"&& data.hasOwnProperty('deleteNode') && data.hasOwnProperty('microserviceList') && data.hasOwnProperty('microserviceConfig')",
									"&& data.hasOwnProperty('routing') && data.hasOwnProperty('registries') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('diagnostics')",
									"&& data.hasOwnProperty('isImageSnapshot') && data.hasOwnProperty('prune');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config/changes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config",
								"changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent tunnel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee055a62-3707-45b4-a036-d688e34334ac",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Tunnel not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdd7eeb7-1af1-47fc-84e8-c3ae99a1f8f8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.registries;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get change version command",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ff9fa2e-f357-40ce-aa5e-b7268c34b408",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Version command not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dae9a7b-d8e9-4964-9a4d-ff161c512594",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.microservices;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59142459-300b-4ded-aa75-95b0faa185dd",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd37962c-aadc-431a-adb0-5cbccaf4a70a",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8ec8897-7d75-4664-8e58-4acde5c8cb52",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Agent collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "38a1ee54-3fa9-4911-bc43-517336f49082",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9de325de-bff2-4cdb-aeb9-9d1e6ab7eb57",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0243abf-899d-4c6d-911d-163a9a2db252",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55852544-9126-4a7f-b123-b4c8fa403c69",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3a61066-194a-456d-b209-3ef9d6425431",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8a99599-a3f1-4d02-9462-53bd5c20009a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df8b6096-de1c-47c0-853d-2b1c67faebb5",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57bc075f-505a-4977-acfa-a1e0c6a475eb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8566578e-bc67-47ce-b663-c077aae09a4b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc2\"] = data.from === \"msvc-1\" && data.to === \"msvc-2\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b7f307b-0b39-40b5-8e18-e0f1b5262b14",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-3\",\n            \"name\": \"m1-2\"\n        },\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-1\",\n            \"name\": \"m1-1\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Application Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a46a4ee8-a998-472f-89ae-35f41f0f0821",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');",
									"",
									"tests[\"Routes are updated\"] = data.hasOwnProperty('routes') && data.routes.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28fdf9a8-1d13-47f6-a165-441f97238f48",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc3\"] = data.from === \"msvc-1\" && data.to === \"msvc-3\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a26dec0-c7b0-464a-9bb4-d25a7cf31afe",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d2cb673-994d-4cdc-ad42-383bcb48bb45",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Description\",\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58b25995-a0bf-4ebe-ae59-1ef82edf8b8a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3d146fa-b6b5-491a-a518-02213857fa5e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e337f34-fc80-4921-be17-a40e26b78858",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "915194e9-eef5-45f3-98c8-311799ca0eea",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"postman.setGlobalVariable(\"application-name\", \"application-name-22\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acd6508e-0e62-4d62-8330-aec1e5a5a3cd",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "511801c1-a9b9-4f4a-a5f0-412f929cef48",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c60c2bb-f29a-4da4-8913-48cb4fbacbf6",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5b0c1d6-b976-4455-ad04-688cdda241eb",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b84e98a6-6b33-4c54-9bee-adf397fcf69f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "742145be-acea-4fc8-a253-f3c2ec2f1eed",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "265d89e8-8f00-4a15-8bcc-fd2a6e75f289",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4e3593d-8dd2-48b7-8d6a-b4834fddf262",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce155a02-6a30-4887-a16f-b59aa8ebda92",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4fcce26d-c9ac-437f-a7f1-80f3a061f371",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "395a905d-40e6-472f-b32e-c7775b326de9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application with template",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d08abe71-7a91-4ac5-96a2-1e2e3f75016c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0829090-43e7-4c4e-b76b-0152b5e55a2e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56a0575d-a7c2-495d-adbc-cc14a004cc9d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ccc9d51-b182-4ac7-b0bf-bd8ce0c6edc3",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id-1\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"node1\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b8c47b6-e75f-4932-bc24-9384888859d0",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id-2\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"node2\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"host\": \"1.2.3.5\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d009d8e8-e957-4f4d-b6f7-8dbd74cf97b6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            },\n            {\n                \"name\": \"version\",\n                \"url\": \"https://localhost:91121/version\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c2e4e22-90bb-493b-b6d4-c5838bfae045",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name-1\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-name-1\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"redistest\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"redis\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"redis\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-name-1\",\n            \"iofogUuid\": \"{{node-id-1}}\",\n            \"rootHostAccess\": false,\n            \"logSize\": 0,\n            \"volumeMappings\": [],\n            \"ports\": [\n                 {\n                    \"internal\": 6379,\n                    \"external\": 6379,\n                    \"publicMode\": false\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "016af613-e9fe-4990-a04b-66591e603d4b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-name-2\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-msvc-name\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [\n                {\n                    \"internal\": 1881,\n                    \"external\": 1882\n                }\n            ],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"sekrittoken\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"http://myproxy:8080/\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-msvc-name\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\", \\\"sharedToken\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"rulesengineHOST\",\n                    \"value\": \"{%  assign curmsvc= self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first %}{{ curmsvc | findAgent: iofogs | map: \\\"host\\\" }}\"\n                },\n                {\n                    \"key\": \"rulesenginePORT\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"ports\\\" | first | map: \\\"external\\\" | first }}\"\n                },\n                {\n                    \"key\": \"redisHost\",\n                    \"value\": \"{% assign redismsvc = microservices | where: \\\"name\\\", \\\"redistest\\\" | first %}{{ redismsvc | findAgent: iofogs | map: \\\"host\\\"}}:{{ redismsvc | map: \\\"ports\\\" | first | first |map: \\\"external\\\" | first }}\"\n                },\n                {\n                    \"key\": \"edgeResLiveness\",\n                    \"value\": \"{{ \\\"com.orange.smart-door\\\" | findEdgeResource: \\\"0.0.1\\\" | map: \\\"interface\\\" | map: \\\"endpoints\\\" | first  | where: \\\"name\\\", \\\"liveness\\\" | first | map: \\\"url\\\" }}\"\n                },\n                {\n                    \"key\": \"edgeResVersion\",\n                    \"value\": \"{{ \\\"com.orange.smart-door\\\" | findEdgeResource            | map: \\\"interface\\\" | map: \\\"endpoints\\\" | first  | where: \\\"name\\\", \\\"version\\\" | first | map: \\\"url\\\" }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-msvc-name\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be214a92-1660-46a2-8145-89ce77249193",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');",
									"",
									"tests[\"msv1 gets env application name\"]=data.microservices[0].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv1 sets env value from another\"]=data.microservices[0].env[3].value === data.microservices[0].env[2].value",
									"",
									"tests[\"msv2 gets env application name\"]=data.microservices[1].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv2 sets env value from env service msvc1\"]=data.microservices[1].env[1].value === data.microservices[0].env[1].value",
									"tests[\"msv2 sets env value from service msvc1\"]=data.microservices[1].env[5].value === data.microservices[0].ports[0].external.toString()",
									"",
									"tests[\"msv2 gets hostname from iofog agent for itself\"]=data.microservices[1].env[4].value === '1.2.3.5'",
									"tests[\"msv2 gets hostname from iofog agent for a service of another app\"]=data.microservices[1].env[6].value === '1.2.3.4:6379'",
									"tests[\"msv2 gets edge Resource liveness endpoint\"]=data.microservices[1].env[7].value === 'https://localhost:91121'",
									"tests[\"msv2 gets edge Resource version endpoint (without version for findEdgeResource)\"]=data.microservices[1].env[8].value === 'https://localhost:91121/version'",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "120f21cc-5567-4195-8327-bce9601aebc6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5dba2f3-616d-49b9-91b8-911bab989c9b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a39c381-2ccc-4b8a-ad53-0b968627c356",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name-1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name-1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "691423f8-4e8d-4c33-aa07-fe9431d378f9",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e296d4e-d732-4b5f-ad06-0b4bf12052d1",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0de15df-e9f6-4030-a976-93f95573174b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d48ff10b-191e-4cbd-a125-ddef91a1b5cc",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfd8671c-ac4d-4ebf-bb55-e6520a1d914c",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24491d4a-cc5c-4dd3-aaff-04ae4b519650",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id-1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id-1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de0e64db-29d1-4932-b89f-5b3db3790af7",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "840462c6-e27d-4c23-ae57-8548a51834d5",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "90ea5cda-869a-4c92-8591-8a66dc684a84",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c8df6909-6c98-4f9f-9083-947af6e1aca7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Flow",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "489f37e8-87f1-4f96-b72a-22de688adda8",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9daf0b24-afb1-4dcb-8e24-64e3e56891bb",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8999599a-5ad4-4733-8f69-65a7827ae3f1",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99bc987e-5f6a-495c-858e-01152f53103d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flow By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd9b9c46-07cf-4877-b609-bac776dc199d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec61772f-1e29-451e-b2d3-b5bf550074bd",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ce2f116-629e-4cd1-9196-869f87fd8c2a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46b39d1a-69f6-42ad-a904-d741e4de1c83",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4772f72-792b-467f-8d36-1552372a3517",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Flow collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f7afd8df-541c-4df7-b2a6-f0e85cda66c0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c4de5fa5-70d1-4231-9e89-6f3ecf17a044",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6939ba90-0201-4f6a-963c-aea141366053",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82c4d701-24db-4920-8a35-4ecc5facbcf2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ed48d4a-6bbe-4363-bd89-cc15f31eae26",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b0888d6-043f-4ec9-b338-c9b54641a69d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b11fa345-ffea-44b2-9d0d-10fd610828c4",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "054bff9b-f90c-4821-bff3-a66056db2d4a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id-2\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c7ef0d6-1e43-4b23-b401-305178718cd5",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5dafc2e-a174-494a-a250-bcf30e48df37",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "045991e4-33d2-4de6-9156-c32b7a9a58e8",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id-2}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc848bc6-bc95-4ce1-9dec-71e0f340632e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e27c588-87b2-464a-8bd6-3068c64535ca",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "501ea638-89b8-4526-a754-c57d98c84110",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3237a34a-fed4-42e6-8def-90833ad24d9c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7abaa680-22c4-4669-9aa0-bcf50266193b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a817d998-2b0b-4ec2-a7b0-528c17b731b2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?flowId={{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "flowId",
									"value": "{{flow-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cc63eca-0b76-48bb-809e-a4826aeda3be",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24622a94-b977-4145-9a65-6d63694746dd",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "464265a5-dbf3-4f8f-bb35-a66871c86dfa",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c98f062-d5c1-462a-b943-9ada0581aeff",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"images\": [\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 1\n        },\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 2\n        }\n    ],\n    \"registryId\": 2,\n    \"config\": \"string\",\n    \"rebuild\": true,\n    \"iofogUuid\": \"{{node-id}}\",\n    \"rootHostAccess\": true,\n    \"logSize\": 0,\n    \"volumeMappings\": [\n        {\n            \"hostDestination\": \"/var/dest\",\n            \"containerDestination\": \"/var/dest\",\n            \"accessMode\": \"rw\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de572aae-3eb6-4d8e-99c4-37d228a6bb5b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5a20698-f58b-4e4f-9e62-d09fa0012fb5",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01a9a786-b697-4a46-b2ca-14c93b0b8847",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a3bdfa7-13ad-432b-9bf9-5d7e98409769",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"images\": [\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 1\n        },\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 2\n        }\n    ],\n    \"registryId\": 2,\n    \"catalogItemId\": null,\n    \"config\": \"string\",\n    \"rebuild\": true,\n    \"iofogUuid\": \"{{node-id}}\",\n    \"rootHostAccess\": true,\n    \"logSize\": 0,\n    \"volumeMappings\": [\n        {\n            \"hostDestination\": \"/var/dest\",\n            \"containerDestination\": \"/var/dest\",\n            \"accessMode\": \"rw\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c22ec0e8-5eac-4fe3-983e-7f2c5f0ceee1",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e19e6ec-0ee7-4118-a714-5baf21d16acd",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n\"sourceMicroserviceUuid\": \"{{ms-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\",\n \"name\": \"my-route\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "577b80de-34ba-46e4-aac8-b18fdacefa8c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b5faec1-94f4-4f96-9d92-dfa8ccb6cb5f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e4ab5fe-590b-4046-bb1f-06845dc068b9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6b7d048-af51-46d3-b61d-8d1f8eaea44c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09e3f6df-9a42-46b2-9dc1-f59f6bdca47a",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad347a4a-73da-4e71-9776-ee8f86ac8931",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4a59c07-f45b-4218-88f8-eddf46da105d",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "429b0828-8cd8-409c-9fd8-131641c88f90",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa9c75b9-f23c-40cd-9d38-885e7ca720b6",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f10966ee-85e6-4fdf-96d6-430182cf0bf4",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "889d3901-62fb-4b20-894a-2f39d1274247",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "004163cc-9cff-4d6c-92df-497e5edee967",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c798f0c-b9fd-4531-b66f-68cfe6cdbfa1",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "73ebe9a4-08c9-4c51-8ff4-480963b13a5a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "347cbdab-03e8-4ce2-92d8-127680e0a44b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Catalog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06a9d1eb-e8a6-4ee6-8696-bff51f75f78a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3870d3ab-c26c-4062-ac90-aebe0a4aa97b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3143247-ae6c-4bc2-a38f-0f3c72b2d39e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "effce436-6437-46eb-a6ab-a42aec04369b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('catalogItems');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f71aa21b-cb77-421c-9435-98bf17cfeed7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.category && data.hasOwnProperty('configExample')",
									"&& data.publisher && data.hasOwnProperty('diskRequired') && data.hasOwnProperty('ramRequired') && data.picture && data.hasOwnProperty('isPublic')",
									"&& data.hasOwnProperty('registryId') && data.hasOwnProperty('images') && data.hasOwnProperty('inputType') && data.hasOwnProperty('outputType');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd2122a7-a3f2-4695-ac3b-758a10c51c6e",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dec9ac95-d499-42a8-8e79-b483fde9c163",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1b7f4ef-2b07-4ea8-a4ae-efe8e79970b5",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Catalog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bd16d735-0442-43b9-b69e-bdc39aabe6a2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8a4a3d5d-a642-4d77-8730-318738c88c7b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tunnel",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ff03fe0-7762-4df6-97b6-14312aeb2eff",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1840540-3d2a-4845-8ad9-8772493d1207",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "141a44d1-fe4c-44c0-bee0-487fe894c8f8",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06b2b752-7204-44d5-a95d-3beca14f9f19",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"dockerPruningFrequency\": 35,\n  \"availableDiskThreshold\": 95,\n  \"logLevel\": \"INFO\"\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2237d41-543e-4ebe-b836-ca4de974e8db",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"open\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node SSH Tunnel Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee9c0397-4ecf-4dc6-b27d-bd2a5eca7ce8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00a0358e-0d4b-4f0e-9565-76891b45af6e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"close\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a1e4d3e-6591-432b-9bd4-48fcc72cf01f",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8374a239-8717-4d63-b93c-46afba9c847d",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "331efb4a-1f0c-4fc8-b187-8b1689a0126f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tunnel collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "423c3871-0856-4f97-bc73-69ab54c7a29b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "68dc13b7-9959-439e-afbf-9b3f80ede5e6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "632910df-e6e7-4046-ae4b-2de537db8576",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41d7cbe0-98cf-4f48-af89-30324d429a83",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83f55877-271f-469d-a348-0aa9a0c8aa7d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c979a35-0bdd-4f58-bd5a-c138bbde8401",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17dd111f-e0e5-4dd5-a023-ac2d33cd8008",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92e39dc5-9a72-425d-b757-9a6a68b04269",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name-2\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f61800d-b28a-48fd-b9f0-fe401bee17eb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2182453b-60b7-41f0-924c-efd518ccfe25",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-name\", data.name);",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "678b6ed3-9846-4878-ab16-ce4d346cd871",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name-2}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60e35787-80b0-4815-bd48-8b23e1be1a57",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-name\", data.name);",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cd5aaae-e811-4804-a61e-85f0282719f5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "828a66f4-c58a-4a29-89a9-b4f540ad45fb",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b6d486b-ff45-441d-bc3e-5650bd7f360b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "148eaadc-8666-4372-a435-ab053b1009c8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14ca6177-0fea-4de9-a99e-845661f1bdf5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35dc88ae-d4fc-4e15-abd5-0e2bcd1299a2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41488cde-feb3-40cd-9871-9d7d43b8ea0a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c90d6dc1-2754-4717-bd8c-51bf2d3fd7bc",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8dfe132-7cca-4e97-9b6e-d79c02fc383a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"",
									"postman.setGlobalVariable(\"ms-name\", \"name3\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33f7b6e0-750f-4708-8c51-d6b3890261b5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15f0c3c9-2df9-42cd-9664-a9b3e04541a2",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce44f55a-3250-404d-ba33-f5005137b457",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64a11f3b-d4fa-482a-a247-436afce77b4a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"catalogItemId\": null,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa4e94ba-9398-4c5e-ad71-1625c82a96de",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ec5fb47-7d4f-449e-a00e-7a4a3577fc9d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"from\": \"{{ms-name}}\",\n \"to\": \"{{ms-name}}\",\n \"name\": \"my-route\",\n \"application\": \"{{application-name}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c178038-49db-4be6-8d9f-dba51083abea",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f30af0e-d013-4a7d-b3c3-871b34595543",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd4d9401-cae6-4411-bcf1-6cda7620567e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a37c5b15-c278-4cbe-a0ac-30a0cf4904d8",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2bd6095-262a-4045-9b2b-3da375b10120",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72a590b8-41e7-4c1e-8eca-ba923055079d",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b40dfb7-d947-4924-9636-554322cc809e",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19d96101-53f6-408e-bfa7-19b9a67685ac",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46eaf006-3039-4fb4-9786-cf12598d6eba",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abaf01f6-d8ce-414b-8eb6-f25effcd08bf",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0cde354-ed91-4a0a-86a3-1c170e0fbcb1",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f229d60-b41b-4d3c-a83d-f9dfc08611b5",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9da259cf-5927-4c1a-b467-e285ee76440c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "328ba343-fc12-422d-9eae-3874efcc0095",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bf472e7c-d123-4449-a6dc-1537e69c105a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Diagnostics",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f176c4a5-5001-4cab-a6bd-875a03087271",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9df65406-8762-489c-98ac-7f88da5c6e1a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d35f1c70-acd3-4046-9e6d-d5b863c71c18",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d27c963-7b3d-4218-bc21-d8ae7fe9c8a7",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d5ae244-34f3-4291-8388-436fa90490cb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28b9060f-b18a-46de-ac96-78cba386ad34",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a4109bd-2fb0-4918-a578-be8a74599760",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request to Create Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15467c54-7912-4d6f-8c4e-d6cff426309c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43c6b58c-c531-45d6-ba65-cbc21bac41f2",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === 'ValidationError' && data.message === 'Image snapshot is not available for this microservice.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable/Disable Microservice Strace Option",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99fe7155-febf-4d24-97ca-81c81102ff97",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enable\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Strace Data to FTP Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3bc7d89-0ba8-435e-b6b3-aac3492bd171",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ftpHost\": \"string\",\n  \"ftpPort\": 0,\n  \"ftpUser\": \"string\",\n  \"ftpPass\": \"string\",\n  \"ftpDestDir\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Strace Data For Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb580ba2-fed7-4786-922e-df98d9e40604",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('data');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace?format=string",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							],
							"query": [
								{
									"key": "format",
									"value": "string"
								}
							]
						},
						"description": "available formats:\n\t- string\n\t- file"
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a82bf5bd-d019-4423-ac5c-5284d45c414a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}?withCleanUp=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							],
							"query": [
								{
									"key": "withCleanUp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a8c0098-9fc1-4a79-a866-e27c9dfe76d6",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f116b4f6-6345-49dc-9636-f9b33c8327f5",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f1f3471-d587-4db2-b160-a71cb0dac801",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cd357e7-e4f9-4b19-bbcd-3b0f5cf05944",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5994cf28-87e5-4470-9944-30a7662b12f9",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Diagnostics collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7f59d9c5-145c-4826-a835-bbfaf74f3c43",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b0e77c8f-c0cf-403d-b5fa-88bab279b60f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ioFog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de862889-3644-4736-8d7f-822a87984822",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7468c13-0ea6-4880-bd54-996cfdf7e5d2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cd47f22-8dd0-4bf0-8c54-80620a86d27b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98453f33-51f7-49a5-8e25-0ada737597e1",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2eec4068-315e-4453-b412-78f0dbb6ff83",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "List ioFog Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6dfa1bd-d423-4dc8-bebc-7ca26db33d16",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4646bed-11eb-474d-9b2d-5c9780086426",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"isSystem\": false,\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List system fogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53175e80-e757-4ed9-ab1b-42cd99333f34",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?system=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "system",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c262e3ae-3a89-4bc9-88c6-d65d4bd769ce",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.name && data.location && data.hasOwnProperty('gpsMode') && data.hasOwnProperty('latitude')",
									"&& data.hasOwnProperty('longitude') && data.description && data.hasOwnProperty('lastActive') && data.daemonStatus && data.hasOwnProperty('daemonOperatingDuration') ",
									"&& data.hasOwnProperty('daemonLastStart') && data.hasOwnProperty('memoryUsage') && data.hasOwnProperty('diskUsage') && data.hasOwnProperty('cpuUsage') ",
									"&& data.hasOwnProperty('memoryViolation') && data.hasOwnProperty('diskViolation') && data.hasOwnProperty('cpuViolation') && data.hasOwnProperty('catalogItemStatus')",
									"&& data.hasOwnProperty('repositoryCount') && data.hasOwnProperty('repositoryStatus') && data.hasOwnProperty('systemTime') && data.hasOwnProperty('lastStatusTime')",
									"&& data.hasOwnProperty('ipAddress') && data.hasOwnProperty('processedMessages') && data.hasOwnProperty('catalogItemMessageCounts') && data.hasOwnProperty('messageSpeed')",
									"&& data.hasOwnProperty('lastCommandTime') && data.hasOwnProperty('networkInterface') && data.hasOwnProperty('dockerUrl') && data.hasOwnProperty('diskLimit')",
									"&& data.hasOwnProperty('diskDirectory') && data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit')",
									"&& data.logDirectory && data.hasOwnProperty('bluetoothEnabled') && data.hasOwnProperty('abstractedHardwareEnabled') && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('version') && data.hasOwnProperty('isReadyToUpgrade') && data.hasOwnProperty('isReadyToRollback') && data.hasOwnProperty('statusFrequency')",
									"&& data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId')",
									"&& data.hasOwnProperty('logLevel') && data.hasOwnProperty('dockerPruningFrequency')",
									"&& data.hasOwnProperty('availableDiskThreshold')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId') && data.hasOwnProperty('isSystem');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node Version Command rollback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59203d7b-b2af-4183-8fc1-0e7ef835e04b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === 'ValidationError' && data.message === 'Can\\'t rollback version now. There are no backups on agent';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/rollback",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"rollback"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Node Version Command upgrade",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6b903d7-939f-44bd-90e7-946206bbb084",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/upgrade",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"upgrade"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Reboot Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f1fc60d-4211-4747-89c9-8ef78dbdf07d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/reboot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"reboot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prune Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b997ad8-7f57-4484-9d84-6ce7a54b31a5",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/prune",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"prune"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL Hardware Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "611a7250-8431-4ec1-83ee-6fc4fae5a014",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL USB Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "412031e3-b62f-4da4-b87b-19bb28165a54",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "819b80a5-1342-4a8a-88e0-75709f18e370",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ac020a6-39db-41e3-9ed1-53f972c2af46",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Node Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c584dd64-a5b4-4fea-8067-f02ab6c214df",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response does not contain any node\"] = data.hasOwnProperty('fogs') && data.fogs.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cbf087-227b-4fa2-99b9-5f890b1bdc30",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "ioFog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4b75351a-a8cf-4d22-abfb-88759fdb1f08",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "da062aed-a90d-4a80-b5b9-384cecc9dbd3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Registries",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c633abd-0655-4bd4-82df-f63266497d1f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb1117c0-5ab8-4364-aefa-4d5f90552d2b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90b26be3-9e16-4c60-bc5f-31b6d09841f2",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"reg-id\", data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string\",\n  \"isPublic\": true,\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"email\": \"test@gmail.com\",\n  \"requiresCert\": false,\n  \"certificate\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84ad65fc-db34-45a9-be26-76411239100b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string2\",\n  \"isPublic\": true,\n  \"username\": \"string3\",\n  \"password\": \"string4\",\n  \"email\": \"test2@gmail.com\",\n  \"requiresCert\": true,\n  \"certificate\": \"string6\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34c0b169-b5df-40bf-90d9-3b8073a29b44",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('registries');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e8ef9b8-259e-45a7-bb10-9a27fca85aae",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f0227fb-8465-450b-bf06-f3b8a57ca624",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Registries collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a0676da5-8f3e-49af-9ff4-44dffa023758",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0a020a4c-f210-44c5-910e-08b491bd3847",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Edge Resources",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e01b90f7-9fde-4b21-aa5a-328697623efe",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "086cf019-daf5-417e-ac66-9c75592663fd",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15917aa2-6b02-4bca-b4d2-4bffe398d807",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e66968f-c297-4c28-9417-67bdfe6476ff",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									"postman.setGlobalVariable(\"node-name\", data.name);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "437bdbe7-c413-4145-945a-e3451a4d172c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf4f94cb-ba02-485c-9f19-4be82190fed2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.token;",
									"",
									"postman.setGlobalVariable(\"agent-token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"{{provisioning-key}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/provision",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2a792b2-2bb8-4602-aa82-c2b6405aa61d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Edge Resource (different version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "146388ff-39e5-42c3-a62b-1797c584144e",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.2\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60bc815-acec-4238-a099-bd772df47965",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (tests[\"Status code is 200\"]) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door2\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door2\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            },\n            {\n                \"name\": \"version\",\n                \"url\": \"https://localhost:91121/version\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\",\n        \"smart-door-v0.0.1\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24d1623a-5735-423a-8fc9-7fd4941cda32",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door\");",
									"",
									"if (tests[\"Status code is 200\"]) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e9f6d1b-faa0-4675-bcc7-355bb27a5fbd",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains metadata\"] = data.name && data.display && data.display.color && data.display.icon && data.display.name && data.interfaceProtocol && data.interfaceProtocol;",
									"",
									"tests[\"Has interface details\"] = data.interface && data.interface.endpoints && data.interface.endpoints.length === 2",
									"tests[\"Has orchestration tags\"] = data.orchestrationTags && data.orchestrationTags.length === 3"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57e3bdf7-d551-4138-a99d-a2fae66163f3",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uuid\": \"{{node-id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}/link",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a017a190-00ad-4a85-b246-905e9f090a0b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('linkedEdgeResources') && data.linkedEdgeResources === true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config/changes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config",
								"changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent linked Edge resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3714eca-9b87-4c51-a20f-0d499a2609b9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 1",
									"",
									"if (tests[\"Contains edgeResources\"]) {",
									"    var edgeResource = data.edgeResources[0] ",
									"",
									"    tests[\"Has display information\"] = edgeResource.display && edgeResource.display.name",
									"    tests[\"Has interface\"] = edgeResource.interface && edgeResource.interface.endpoints.length > 0",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/edgeResources",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"edgeResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge resource associated to Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00121cc8-916f-4628-8196-a9caaba09f21",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 1",
									"",
									"if (tests[\"Contains edgeResources\"]) {",
									"    var edgeResource = data.edgeResources[0] ",
									"",
									"    tests[\"Has display information\"] = edgeResource.display && edgeResource.display.name",
									"    tests[\"Has tags\"] = data.tags && data.tags.length === 3",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlink Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d12380dc-fba3-4d83-97c6-68d69932db0f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uuid\": \"{{node-id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}/link",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge resource associated to Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e98d9bd-e494-451e-ad13-bff916f551a8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 0",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Edge Resource version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5835122b-8cbd-4884-b543-2b6e858fea54",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version-2\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.2\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Edge Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b174d3e3-bf0b-4173-9a28-bfb6ef5d8e37",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains 2 resources\"] = data.edgeResources && data.edgeResources.length === 2"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResources",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Edge Resources versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "270ee53a-de5d-4d57-b067-93cdd9a149f7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains 2 resources\"] = data.edgeResources && data.edgeResources.length === 2",
									"",
									"data = data.edgeResources[0]",
									"",
									"tests[\"Contains metadata\"] = data.name && data.display && data.display.color && data.display.icon && data.display.name && data.interfaceProtocol && data.interfaceProtocol;",
									"",
									"tests[\"Has interface details\"] = data.interface && data.interface.endpoints && data.interface.endpoints.length === 2",
									"tests[\"Has orchestration tags\"] = data.orchestrationTags && data.orchestrationTags.length === 3"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Edge Resource V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f368069-7986-4ab4-97fc-5ef5a6279ecb",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5eee2bc0-39ee-4668-8484-83a36b313e20",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb079782-fe97-482b-bcc6-fe4760fc6d89",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bb76fb5-0112-41f0-8559-e1ba5a84aafb",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fddd7fd8-63e1-4ce4-afe1-03a7bdbfba4f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ec770c13-d512-4eb0-9519-5ea8d41faa31",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c1a49305-df7f-4b71-b46d-039b71f4e41d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "45b5e888-3fa5-4089-9b5f-fc18ba018481",
			"key": "host",
			"value": "127.0.0.1:51121",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}