{
	"info": {
		"_postman_id": "3dc82aec-4ca6-457a-9943-4a3e0e3ee570",
		"name": "Controller Testing",
		"description": "iofog-controller collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f1ab7f4-620c-44d0-b56f-c046b3b43361",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3558fc74-8d9a-4c27-afc2-104a7b13c0cc",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Activation code not found\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activationCode\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/activate",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"activate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0f9ab82-bafd-4d09-a81e-fb7fee2c03ad",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e6aa590-ff76-4ab8-ae8d-5cfa003c7ef1",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a8d6e57-f054-4e9f-814e-de5468650704",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend activation email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8169b65-bab5-453a-8e8f-08446821562b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/user/signup/resend-activation?email=user@domain.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup",
								"resend-activation"
							],
							"query": [
								{
									"key": "email",
									"value": "user@domain.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfc5ad3a-9d62-4125-92ea-056cdb7919e0",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a02c601a-70ac-43ed-94af-edaac571c02a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d3e0fe-d4c5-47c4-b6cf-ebe544a344ff",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Saeid\",\n  \"lastName\": \"Rezaei\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ea60ee-9e0d-4407-a040-fa22c431db06",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"#Bugs4Fun\",\n  \"newPassword\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f330da72-0e97-4c11-a30d-460dc8f9f8be",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "User collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e35fb285-0f2b-4c55-97fb-6356240e9240",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e644376c-2c00-4817-92b5-763c7e3ff64a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "General",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc0ba3cc-b35a-4087-82bd-1ec0771990ab",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.status && data.hasOwnProperty('timestamp');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get email activation setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2623cd4a-daff-4c74-aeb4-cc823a5d9177",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('isEmailActivationEnabled');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/email-activation",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"email-activation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fog types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e18c26e-b632-4d53-bbea-cb92e01144a1",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.fogTypes;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/fog-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"fog-types"
							]
						}
					},
					"response": []
				}
			],
			"description": "General collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "76c3b3c0-4ddd-4df0-8d3d-057ec0f4d7fc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cc50cdc3-1f63-4d2d-ba67-e1810eb05b4e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Agent",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e8911-1cfd-4513-a285-26a5d529a430",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6514980e-5b8c-4a7f-9ab0-6aca009c6f6f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "445e846b-3f2a-492f-982e-f8ec30b4d465",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fc0fb32-ec30-4067-bac0-9f3147c492f0",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72f736f4-9e90-4a77-9d0a-d78092b40335",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "921b9803-69dc-4afa-8ec5-666e9587fa9f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.token;",
									"",
									"postman.setGlobalVariable(\"agent-token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"{{provisioning-key}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/provision",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c850207-3281-4f66-914a-c3e0bd0c559a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.networkInterface && data.dockerUrl && data.hasOwnProperty('diskLimit') && data.diskDirectory",
									"&& data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit') ",
									"&& data.logDirectory && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('statusFrequency') && data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('latitude') && data.hasOwnProperty('longitude')",
									"&& data.hasOwnProperty('routerHost') && data.hasOwnProperty('routerPort')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc912a8d-f35a-465e-852d-757efc6b260b",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Image snapshot not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e93389ed-8a44-4a6b-ba6c-82ce5f59f332",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Invalid microservice UUID 'abcedf'\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices/abcedf",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices",
								"abcedf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe821d9d-d89b-4051-b2ba-291fe08e4f9a",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update hardware info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb38724b-70c9-46ad-a9d0-3a4b1f53626f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update USB info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd22074f-c2d0-4eed-b27d-d371abb8dd66",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tracking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb5d9a11-b1f0-4ed8-998d-0e2cb7d97ce4",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{agent-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"events\": [\n        {\n            \"uuid\": \"test_tracking\",\n            \"sourceType\": \"agent\",\n            \"timestamp\": 1551694999,\n            \"type\": \"test\",\n            \"data\": {\n                \"event\":\"test\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/tracking",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tracking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96c7616a-33fd-40ea-bf4c-27394a63f5be",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"straceData\": [\r\n    {\r\n      \"microserviceUuid\": \"abcdef\",\r\n      \"buffer\": \"test\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4670fbd-7a14-4335-9c0c-1ef5519c28aa",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"daemonStatus\": \"RUNNING\",\r\n  \"daemonOperatingDuration\": 15,\r\n  \"daemonLastStart\": 25,\r\n  \"memoryUsage\": 16,\r\n  \"diskUsage\": 14,\r\n  \"cpuUsage\": 17,\r\n  \"memoryViolation\": true,\r\n  \"diskViolation\": true,\r\n  \"cpuViolation\": true,\r\n  \"microserviceStatus\": \"[]\",\r\n  \"repositoryCount\": 5,\r\n  \"repositoryStatus\": \"RUNNING\",\r\n  \"systemTime\": 155,\r\n  \"lastStatusTime\": 166,\r\n  \"ipAddress\": \"192.168.0.1\",\r\n  \"processedMessages\": 255,\r\n  \"microserviceMessageCounts\": \"counts\",\r\n  \"messageSpeed\": 52,\r\n  \"lastCommandTime\": 57,\r\n  \"tunnelStatus\": \"on\",\r\n  \"version\": \"1\",\r\n  \"isReadyToUpgrade\": true,\r\n  \"isReadyToRollback\": true\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cc75367-a215-4d5e-9ab5-54e71bb5f33d",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"ValidationError\" && data.message === \"Invalid content type\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/zip"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64b689f1-0be3-463d-93d6-82964263f773",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"networkInterface\": \"wlan0\",\r\n  \"dockerUrl\": \"http://google.com\",\r\n  \"diskLimit\": 15,\r\n  \"diskDirectory\": \"testDirectoryPath\",\r\n  \"memoryLimit\": 150,\r\n  \"cpuLimit\": 17,\r\n  \"logLimit\": 16,\r\n  \"logDirectory\": \"testLogPath\",\r\n  \"logFileCount\": 7,\r\n  \"statusFrequency\": 35,\r\n  \"changeFrequency\": 36,\r\n  \"deviceScanFrequency\": 37,\r\n  \"watchdogEnabled\": true,\r\n  \"latitude\": 22,\r\n  \"longitude\": 66,\r\n  \"gpsMode\": \"manual\",\r\n \"dockerPruningFrequency\": 35,\r\n  \"availableDiskThreshold\": 95,\r\n  \"logLevel\": \"INFO\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17d86da6-4c3d-43d8-9826-28aec3d03a41",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('config') && data.hasOwnProperty('version') && data.hasOwnProperty('reboot')",
									"&& data.hasOwnProperty('deleteNode') && data.hasOwnProperty('microserviceList') && data.hasOwnProperty('microserviceConfig')",
									"&& data.hasOwnProperty('routing') && data.hasOwnProperty('registries') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('diagnostics')",
									"&& data.hasOwnProperty('isImageSnapshot') && data.hasOwnProperty('prune');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config/changes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config",
								"changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent tunnel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d720de6a-7797-46e5-a832-c7f0692aaf5c",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Tunnel not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31a4ec26-5088-417c-8e05-3470648529f6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.registries;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get change version command",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "259b2494-1243-4b0e-a937-68bb8e171a01",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Version command not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9f8eb6a-7ac7-4baf-8d8d-e8ef5c5e7a30",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.microservices;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f8d0f43-a349-4781-af6c-21a495ad0d39",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2ab8b50-18a7-4c76-81e3-47c9f92e0db4",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a30ea40-07fe-485e-a0db-1073d583da5d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Agent collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a6e8c1c7-6a7f-4997-8449-22590dc8e5ff",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "93c87312-b277-4dc2-9f05-7831c247bf6a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f95d4105-6d5a-463c-8054-5d0a509c9e6b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "244747db-ccf3-4e77-9702-223479676fea",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "921b9b6f-fe59-4c42-bf19-d7a8f9a31374",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b7efdb4-3669-4ddf-9b0a-79895511b38e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdf4907b-16f5-4856-b04c-122cb50a573f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93bbccea-aee2-4a46-bb97-f59ea3d34e26",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec881d96-5d93-44c0-8b4d-09f9819f7296",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc2\"] = data.from === \"msvc-1\" && data.to === \"msvc-2\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0588f141-d308-4160-b23f-ca1bbaf4fc7f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-3\",\n            \"name\": \"m1-2\"\n        },\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-1\",\n            \"name\": \"m1-1\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Application Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af773a4e-1b9c-4b18-86e1-07175a1959ed",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');",
									"",
									"tests[\"Routes are updated\"] = data.hasOwnProperty('routes') && data.routes.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e08b8ce-8b8e-4454-a20a-5fbeb92646e8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc3\"] = data.from === \"msvc-1\" && data.to === \"msvc-3\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c8fb3c0-6ae0-4d92-bff6-3e6821002c9a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39ac6d28-2e2d-418c-ad60-0770ec9b2f37",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Description\",\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a527075f-21c7-4d57-a630-8751084df321",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ca12c80-835a-4637-967d-4df3f8b6104e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0dd71c65-ed15-434d-8cc1-d308359334dc",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bcbcc50-5c27-445e-aeec-f071cc3bbd8e",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"postman.setGlobalVariable(\"application-name\", \"application-name-22\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c41d6a38-952e-47fb-9ab3-c8386d7cce72",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00877e19-b3dd-43b1-8667-8690487fd945",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebeb3ca1-78eb-4115-8bde-fc415999d454",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ad18c21-2f96-4736-a51e-fab4ce77b99b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "881b593b-7092-4943-8383-edb92b888e5c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4d4e66e-bdfd-4996-b4f6-87168cd78333",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cd0ff37-8ac1-4921-8173-3b9be45ee448",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b2ce29-3765-4d6a-a4fe-2db5b9942366",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37b80f3b-882d-47e3-9a46-d62d925734f1",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cbd14f40-b005-4f12-bf7f-b227b6a56735",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d6ced94a-1c58-4be5-bcd6-c47e806d19ad",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application with template",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ec8c3d0-e51f-402d-9fef-647c000d020e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b3e9089-2034-42c5-b509-8552aa76face",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0fb1321-b811-40f1-9b85-60f7af94d008",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55eea1e5-beb6-4be0-abe2-842a786269d2",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcd5bfbb-4f92-4b33-935d-ca2925f1ca4d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9848ed44-2bb5-4368-afee-30afc582199c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [\n                {\n                    \"internal\": 1881,\n                    \"external\": 1882\n                }\n            ],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"sekrittoken\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"http://myproxy:8080/\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\", \\\"sharedToken\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"rulesengineHOST\",\n                    \"value\": \"TODO\"\n                },\n                {\n                    \"key\": \"rulesenginePORT\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"ports\\\" | first | map: \\\"external\\\" | first }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d35fd16f-b92f-443f-9610-491bd6b95148",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');",
									"",
									"tests[\"msv1 gets env application name\"]=data.microservices[0].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv1 sets env value from another\"]=data.microservices[0].env[3].value === data.microservices[0].env[2].value",
									"",
									"tests[\"msv2 gets env application name\"]=data.microservices[1].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv2 sets env value from env service msvc1\"]=data.microservices[1].env[1].value === data.microservices[0].env[1].value",
									"tests[\"msv2 sets env value from service msvc1\"]=data.microservices[1].env[5].value === data.microservices[0].ports[0].external.toString()",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cecc652e-47a6-40ac-978b-d84d562fc4a7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e6f358e-7155-4cf4-998e-4ac511dc9dde",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc38a580-1232-4da4-98d4-7aab2a0e3970",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"postman.setGlobalVariable(\"application-name\", \"application-name-22\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09ecb231-2db5-42b4-b88d-f53f2721f367",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b19eab45-8779-42b6-9229-f9ff9f66119c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6abcce35-55b0-47dc-8f9a-dc02ba567f80",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d307b152-a630-4078-a6bd-03deed0a8ba2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "448ae550-ba17-45e8-855f-11f294644da8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9258f88-a675-4d3c-9edc-ff8c5159adbe",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b38ca8ec-dbda-4196-a3a0-65d4b3e94724",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59f90c25-fe35-4907-9968-3049d8079d36",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9da2f6b-56c5-4526-a53b-6c8add814834",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2c88edc1-5db3-4125-9364-d0111f7b0e9d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2f41963e-31e8-42de-bc28-797baa98a461",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Flow",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc418219-9969-4ae8-86a7-53645196cb89",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08d1e148-70fb-4a01-8765-841d904523be",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e50d8d59-8e4c-4119-a88e-77baede6a58d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f86c648-eab0-4b82-a8c3-b2729d03b0f7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flow By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1411e37c-7754-4ed2-ace5-fe3eb9ef2d91",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ce8fb78-ed87-425a-8fc0-07b72aa06686",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d99142f-60db-43ee-9cfd-05a6547c4f8b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3295bc7b-0e82-4bf4-8121-9506c60ac861",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "112e3173-fada-4361-82a6-7ea472f00f2b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Flow collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4d805282-5715-4772-a3d5-8179f26bd218",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b0c64ce9-96c3-4b83-9ab0-ab2428b85a74",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1897b696-3720-4819-8d31-20662f7d1a64",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b24a640-ef42-44c5-a3ba-2352d3970bca",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60b35f07-387c-4e78-a73f-d5a734f1e598",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8df78bd-bfea-4b15-aafc-6783f12ea19d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b47f944b-a73f-4aa5-84ed-f4fcd30555eb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7776f1a2-8889-4f99-a291-7150504f0175",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id-2\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c972849-66ab-4ee9-a458-9962981f58f7",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cac96e1-eeb4-4127-966e-7bf537f19c41",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a27d608-126a-4c87-a965-b1dd607d5f40",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id-2}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db1ff474-ca26-4de2-8603-916f9a4050d8",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f89504bb-d65b-4a06-990c-7959ad501283",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af882f79-937f-4fab-adb6-b54b890fdc20",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "199ad10d-8b4c-484d-88b8-d19664d5fd9d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfcf8594-5a06-4a3c-b632-9cad375e81b6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef7f39ef-4d0c-4ed0-aba5-d5e546b21098",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?flowId={{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "flowId",
									"value": "{{flow-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c319bfaa-2b98-45c6-a09d-c08b6a5ebc00",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25893937-35c9-42dc-9ee2-32196db16b6b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8a97aa6-2b84-4a0a-b161-23eccc20759b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c60b911d-977b-44a0-80e1-a92b482e90e6",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"images\": [\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 1\n        },\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 2\n        }\n    ],\n    \"registryId\": 2,\n    \"config\": \"string\",\n    \"rebuild\": true,\n    \"iofogUuid\": \"{{node-id}}\",\n    \"rootHostAccess\": true,\n    \"logSize\": 0,\n    \"volumeMappings\": [\n        {\n            \"hostDestination\": \"/var/dest\",\n            \"containerDestination\": \"/var/dest\",\n            \"accessMode\": \"rw\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "930d50a3-332d-4963-9e83-13ee6ece9e7e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48cb60f5-dd72-4de9-90f4-8290982b0488",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5e993ce-652c-4d75-b98c-aa0a8365cf21",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ae413c8-33c1-4de5-8412-b444b8bf3550",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"images\": [\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 1\n        },\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 2\n        }\n    ],\n    \"registryId\": 2,\n    \"catalogItemId\": null,\n    \"config\": \"string\",\n    \"rebuild\": true,\n    \"iofogUuid\": \"{{node-id}}\",\n    \"rootHostAccess\": true,\n    \"logSize\": 0,\n    \"volumeMappings\": [\n        {\n            \"hostDestination\": \"/var/dest\",\n            \"containerDestination\": \"/var/dest\",\n            \"accessMode\": \"rw\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c848a30-9b03-4dbb-b7bf-7d5ea688cd6c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d0a4a21-2f5a-432f-92ca-605a4839410e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n\"sourceMicroserviceUuid\": \"{{ms-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\",\n \"name\": \"my-route\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42c40a2a-5465-41ca-aea6-ed9269186a33",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adc17ba6-4632-46c9-b3a8-aea49d02ab63",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c68f6700-c662-4870-b405-b4df32eeab40",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "239af50b-c86e-4d0a-8b13-f54e133f4849",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84ac3ab0-f183-4b8e-ac21-36eb5320ac47",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00113742-b80f-4f0e-bb42-6a783dd3d8c6",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4d8c737-65c2-4006-8e5e-52182ac12b4f",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bd07cca-79c4-4cf2-9600-3dc4e24911c0",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b8c3975-4d37-49f0-9b2c-6451217bf1a3",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a4d0441-d00e-497e-9dc6-3e624fb3ef8d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d98cbb4-1f58-4c9f-8e3d-a0644bacb124",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27f50f05-a041-49a3-ad4c-759d9486d5cb",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7e5d99d-eea0-479b-9a66-a16216c00c14",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bf02a323-2e31-44e1-9d60-916c0bfa6a55",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9f3fd072-0274-4602-8633-9bbd8d993290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Catalog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f42e287-e983-49a4-be9f-b20c5ae2065c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ff3c064-98c0-46db-81f1-97a1ac93ed0e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc871363-28e3-4d06-a0f0-84082d4578d5",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "323f9d16-1cbd-43f7-84ed-aa9b22abf112",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('catalogItems');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4e4faca-9ef8-44d4-a2dc-a2e9d258d50f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.category && data.hasOwnProperty('configExample')",
									"&& data.publisher && data.hasOwnProperty('diskRequired') && data.hasOwnProperty('ramRequired') && data.picture && data.hasOwnProperty('isPublic')",
									"&& data.hasOwnProperty('registryId') && data.hasOwnProperty('images') && data.hasOwnProperty('inputType') && data.hasOwnProperty('outputType');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e22687-a2ea-4671-afd3-4cbd390e2b10",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5f4a214-b1a0-4edd-9ebc-b122fa5af08b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2377685c-bbe2-4b54-8e6b-844ed0008f8b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Catalog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2be74347-7fe0-4b41-a34e-62b7aab1d1f8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2cbf400-f11d-44aa-9466-2061c2b62e79",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tunnel",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbd638a6-8679-4a42-9f8e-56fa0d463653",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38c2b91f-5573-47a1-bb51-0b881c9aee0d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58a59691-bf70-40a7-915a-77a47c9be608",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9dc0e9c-d945-43b4-a5da-6b115219d70b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"dockerPruningFrequency\": 35,\n  \"availableDiskThreshold\": 95,\n  \"logLevel\": \"INFO\"\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45113b28-bac5-4036-8a07-c17a56f32e13",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"open\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node SSH Tunnel Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afe9a0dc-075a-465e-8101-7ba7c9a563a4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d300a17-d128-4aa1-a354-42d9a29aa3e0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"close\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56b10507-ffdf-4d1f-ad2d-92a10f4be128",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d997d48-a033-4de2-af1f-e3f9364b6a67",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "565a76df-0a10-4165-93c7-17c0b392c996",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tunnel collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "97663560-202a-4233-a862-118f1d31ec0a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "02a917f2-5f63-468b-8dea-c0fa91081055",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc51a53e-eb7f-4814-8ba4-ae2e8d19a25a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76e75de6-7903-4e8b-9f2f-a4aa8eb92476",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d8f6af5-9d56-45e2-8e77-7af3ff0fb7cb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ab005bb-a0dd-4d01-9c7b-2309a867a2ee",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01d62f60-23cb-4223-9f1b-31c40e7d3089",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "492c513d-9cc8-4f22-aa39-6402bc27f218",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name-2\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c54023e-3bae-42d5-bf57-4e054a6c0b41",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f972bfd-91c3-4912-a74a-3887f672fd33",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-name\", data.name);",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c98d056-4375-4fa3-854d-20f577850595",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name-2}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b39ae87-0e4a-48e3-9b8e-7180c0305e66",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-name\", data.name);",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d709691-0017-4e64-a366-46965d2d6e2f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe53e2d7-ed98-459c-a7b2-50acd71d07b9",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48c4ce54-0964-4361-9a65-cc52d478f91a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbf6420e-ae7d-4528-99d0-18d2579a1e11",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06cf9e82-cf5a-4bf4-a6d2-6c7148839515",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f68d5d9-e5ff-4cf0-9afe-6f3044eba313",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5471c438-12be-4e46-bb0c-325e35cb2f27",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3cb0ce8-b12e-4b23-8274-eee30b0356c9",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1df83be8-e4b0-4e87-9aba-6d717fbf19ff",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"",
									"postman.setGlobalVariable(\"ms-name\", \"name3\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90d38bcc-e7be-4318-8b6b-33e1f888845d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba4e741a-ac0f-4cdf-91ef-05db3ab11d8d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85be07a4-42f6-4c45-b4e4-025188a3c792",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2900156-1924-41af-8c9c-694c2d47826b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"catalogItemId\": null,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19bba9d1-35d8-49ae-9064-985a056b33c5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77b0dce1-1841-4295-a1ae-f85c0c0b4267",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"from\": \"{{ms-name}}\",\n \"to\": \"{{ms-name}}\",\n \"name\": \"my-route\",\n \"application\": \"{{application-name}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fac0d879-9dcd-4273-bb0a-3aa320eac2f1",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c12f9cc-c7b4-4938-b366-cd002bde38c0",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65ef11bc-f3ec-452d-84b8-597de7808149",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d696e618-e86b-429b-8a53-335651c774d4",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd8a4beb-828d-4a1a-95dc-b06a21d250b2",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d580a7bb-28d8-4ecc-ac6c-4caf1dbc3f9d",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42845374-9dd1-4efd-9e26-bea9df37eff7",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9dee08f-b845-4c8e-824c-6dc382e25c21",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25fd4bd9-05bc-4f2c-8310-a10e4831c116",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2282c54c-d8d7-430b-8417-dbb5df6812e1",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bde8674-7f1a-4a5f-ac65-0278e554cda7",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f248c49-62d4-478f-818f-c871adc1a83c",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d99b638-6ca3-4215-a64a-db20476be549",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3d889a08-66d2-4721-a928-c691c72eaef0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "252fafa9-b8c5-4891-9336-6726a3e22faf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Diagnostics",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74679448-7338-47d2-858f-e1d6408a29cc",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83953b15-56c8-410e-b8e0-95372c1c6082",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "427445eb-e05e-4a5d-b820-bc61a5c72df7",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33cfeb1a-3351-4929-a23f-4594d6954866",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93ac0c54-78b0-4c4d-b548-104e88262f73",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42650abd-063e-41fd-9472-7dbdfdce71a7",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "421b61ec-1cd2-4eea-a3bc-a0f9bd32d6ad",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request to Create Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d18ddc3c-41da-4fe2-b22e-24ac61c58812",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7bcfaaf-7e8b-4fa0-903e-696c6f6fc9e2",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === 'ValidationError' && data.message === 'Image snapshot is not available for this microservice.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable/Disable Microservice Strace Option",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ca6622-4534-41b2-96d1-a5c2861a0055",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enable\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Strace Data to FTP Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eef788d4-25af-4170-bb27-ae9b1ee08391",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ftpHost\": \"string\",\n  \"ftpPort\": 0,\n  \"ftpUser\": \"string\",\n  \"ftpPass\": \"string\",\n  \"ftpDestDir\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Strace Data For Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d97a240-757e-4752-a5e4-56f9847cd9e7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('data');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace?format=string",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							],
							"query": [
								{
									"key": "format",
									"value": "string"
								}
							]
						},
						"description": "available formats:\n\t- string\n\t- file"
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89782ed0-ff04-4bba-b459-e640132c4ac7",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}?withCleanUp=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							],
							"query": [
								{
									"key": "withCleanUp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db2fd316-c3d5-444a-ae0c-a4016909c679",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3f4d809-a510-43e4-b37f-b4531645337e",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11a1cb9c-dd29-480c-989b-85724ab31471",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac79ad31-b40c-4c5d-b997-24642fe86205",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e242dc7d-df7a-47ca-bb98-4ce869915cb8",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Diagnostics collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "df2f8e97-d4f7-4a21-ae77-6beb51e3f088",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "210f16c5-a5d5-400a-ac3c-fe7e5d1aac35",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ioFog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42444d67-f21e-4854-b76d-0453defe354d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2be96aa8-3d6b-4648-8281-e9e26d9ffd69",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "515b683c-c865-4751-91ca-fdff16c0c5ff",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "139f94ff-9d30-4cc6-a5f8-9e0a2aa48c8d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39573da0-d872-4d6a-b549-a3f41ea9bbaf",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "List ioFog Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05fa9a43-bba4-48ec-85d4-7808ea003d35",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b56b8a9-f945-454f-9ed0-3dd016e0538e",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"isSystem\": false,\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List system fogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9b1fccb-4009-4419-95b0-0cfe7d984516",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?system=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "system",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bc73cb3-ba7b-4964-a2ed-b237dd23f830",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.name && data.location && data.hasOwnProperty('gpsMode') && data.hasOwnProperty('latitude')",
									"&& data.hasOwnProperty('longitude') && data.description && data.hasOwnProperty('lastActive') && data.daemonStatus && data.hasOwnProperty('daemonOperatingDuration') ",
									"&& data.hasOwnProperty('daemonLastStart') && data.hasOwnProperty('memoryUsage') && data.hasOwnProperty('diskUsage') && data.hasOwnProperty('cpuUsage') ",
									"&& data.hasOwnProperty('memoryViolation') && data.hasOwnProperty('diskViolation') && data.hasOwnProperty('cpuViolation') && data.hasOwnProperty('catalogItemStatus')",
									"&& data.hasOwnProperty('repositoryCount') && data.hasOwnProperty('repositoryStatus') && data.hasOwnProperty('systemTime') && data.hasOwnProperty('lastStatusTime')",
									"&& data.hasOwnProperty('ipAddress') && data.hasOwnProperty('processedMessages') && data.hasOwnProperty('catalogItemMessageCounts') && data.hasOwnProperty('messageSpeed')",
									"&& data.hasOwnProperty('lastCommandTime') && data.hasOwnProperty('networkInterface') && data.hasOwnProperty('dockerUrl') && data.hasOwnProperty('diskLimit')",
									"&& data.hasOwnProperty('diskDirectory') && data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit')",
									"&& data.logDirectory && data.hasOwnProperty('bluetoothEnabled') && data.hasOwnProperty('abstractedHardwareEnabled') && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('version') && data.hasOwnProperty('isReadyToUpgrade') && data.hasOwnProperty('isReadyToRollback') && data.hasOwnProperty('statusFrequency')",
									"&& data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId')",
									"&& data.hasOwnProperty('logLevel') && data.hasOwnProperty('dockerPruningFrequency')",
									"&& data.hasOwnProperty('availableDiskThreshold')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId') && data.hasOwnProperty('isSystem');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node Version Command rollback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0b731fc-a14b-4a72-86e6-d9efc44470cf",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === 'ValidationError' && data.message === 'Can\\'t rollback version now. There are no backups on agent';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/rollback",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"rollback"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Node Version Command upgrade",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "566ee042-15d7-4b69-a309-ef33fe691a9e",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/upgrade",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"upgrade"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Reboot Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e972fa62-1b8c-420b-ab6c-c95067809abc",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/reboot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"reboot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prune Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37826907-c1f7-4eca-97e2-18384023ec69",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/prune",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"prune"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL Hardware Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ae7a46c-d83a-4da1-85d8-5e7e939b51db",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL USB Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c529aa6-0a42-4be0-b163-6e622a418a2f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bac220e3-65b8-4c05-b07a-f3f9625dcbbc",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3c48f9f-9ab7-402c-adfc-b42f96e5c6f9",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Node Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02fc4d2c-2122-4dd2-9934-5b110543c5ac",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response does not contain any node\"] = data.hasOwnProperty('fogs') && data.fogs.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a4830ef-1e65-4969-a5ec-55c2c25b406d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "ioFog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ea71f40b-9c91-44ea-b156-14d6cb14c85c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5ee29844-4108-4a5c-ac72-fca525b4757c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Registries",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41ce4cdb-0ee1-4cf3-832d-f8af40da5d93",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2dd4845-0b63-4b2f-b69d-7c54a8212406",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8113f11f-c18f-404b-8b37-5e1d16daf44f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"reg-id\", data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string\",\n  \"isPublic\": true,\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"email\": \"test@gmail.com\",\n  \"requiresCert\": false,\n  \"certificate\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f26f5952-e57a-4508-a642-702d26182119",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string2\",\n  \"isPublic\": true,\n  \"username\": \"string3\",\n  \"password\": \"string4\",\n  \"email\": \"test2@gmail.com\",\n  \"requiresCert\": true,\n  \"certificate\": \"string6\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c6be70f-2c0d-44b9-8f87-3253a8425f90",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('registries');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "199e0bf5-6517-4245-8a89-3b2cf15aec22",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d890e81c-2164-4f7b-8972-ed35a9e09930",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Registries collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "01158fd9-cfa6-4be9-a4b9-0ada0f5993d9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9a0eaff4-1356-4057-888f-10a327bdac80",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Edge Resources",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02591ddc-45d0-46ed-ae4e-7c9862807859",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66914757-7f3a-4a3c-a838-9b2779f8b424",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7de2dce-7631-471b-999a-1aacaab81a86",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15f46cd3-614b-45ec-a79b-e88b3e7b1e5a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									"postman.setGlobalVariable(\"node-name\", data.name);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82901a92-0e1b-4dc6-9320-6e46364e7f67",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31347c00-6971-4998-a5b4-7a7c7bc753b2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.token;",
									"",
									"postman.setGlobalVariable(\"agent-token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"{{provisioning-key}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/provision",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f8aca7b-8fcc-4bda-b8f5-a9474c9a172d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Edge Resource (different version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b956bf32-7868-4570-b816-fbf77c1bf5cd",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.2\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f9cda33-35df-4a82-8f43-586ab48b2845",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (tests[\"Status code is 200\"]) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door2\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door2\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            },\n            {\n                \"name\": \"version\",\n                \"url\": \"https://localhost:91121/version\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\",\n        \"smart-door-v0.0.1\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7fcecf4-3629-4952-8a51-12b3e9364f90",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door\");",
									"",
									"if (tests[\"Status code is 200\"]) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10f23e14-0f51-43a3-9193-23da880cda1b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains metadata\"] = data.name && data.display && data.display.color && data.display.icon && data.display.name && data.interfaceProtocol && data.interfaceProtocol;",
									"",
									"tests[\"Has interface details\"] = data.interface && data.interface.endpoints && data.interface.endpoints.length === 2",
									"tests[\"Has orchestration tags\"] = data.orchestrationTags && data.orchestrationTags.length === 3"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fefe57ee-5876-4ba7-b2f6-3b0cb87b8eb3",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uuid\": \"{{node-id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}/link",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fecc90cc-cb96-40ca-97d9-2fa8e2c9ca0e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('linkedEdgeResources') && data.linkedEdgeResources === true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config/changes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config",
								"changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent linked Edge resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c35e2cd5-c817-4d18-8f7f-017f962e29a6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 1",
									"",
									"if (tests[\"Contains edgeResources\"]) {",
									"    var edgeResource = data.edgeResources[0] ",
									"",
									"    tests[\"Has display information\"] = edgeResource.display && edgeResource.display.name",
									"    tests[\"Has interface\"] = edgeResource.interface && edgeResource.interface.endpoints.length > 0",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/edgeResources",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"edgeResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge resource associated to Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38a4cada-0cc5-479b-94c0-1d950b196b2e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 1",
									"",
									"if (tests[\"Contains edgeResources\"]) {",
									"    var edgeResource = data.edgeResources[0] ",
									"",
									"    tests[\"Has display information\"] = edgeResource.display && edgeResource.display.name",
									"    tests[\"Has tags\"] = data.tags && data.tags.length === 3",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlink Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "523c49d0-42f7-4a9b-bfcd-212753faea3a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uuid\": \"{{node-id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}/link",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge resource associated to Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4ddb00e-fb9b-40a4-a173-d36c15af48ab",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 0",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Edge Resource version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acfd7a75-0cca-4ab8-9c5a-f5c8c05be3c0",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version-2\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.2\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Edge Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52fbeb38-7eb5-4b26-b08b-41501a9f2a1a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains 2 resources\"] = data.edgeResources && data.edgeResources.length === 2"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResources",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Edge Resources versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eaf76b81-975f-4a39-a460-3002d588cc76",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains 2 resources\"] = data.edgeResources && data.edgeResources.length === 2",
									"",
									"data = data.edgeResources[0]",
									"",
									"tests[\"Contains metadata\"] = data.name && data.display && data.display.color && data.display.icon && data.display.name && data.interfaceProtocol && data.interfaceProtocol;",
									"",
									"tests[\"Has interface details\"] = data.interface && data.interface.endpoints && data.interface.endpoints.length === 2",
									"tests[\"Has orchestration tags\"] = data.orchestrationTags && data.orchestrationTags.length === 3"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Edge Resource V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8570a7c1-1277-48e4-9e22-fe796ffc331a",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc018d6a-27a0-4a22-8430-dd0070e8770f",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e72b26fe-d0ed-43a2-90d6-5c3bad399a54",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e98fab07-df6e-4c0a-8704-4de0f2e2d8a8",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6604200-987d-455c-aa2c-d5cda0feaa95",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e7e35c76-82c9-4af2-8bb6-ff247af50f31",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b52cfbd0-8bd2-4d3e-84fd-64b889d9f98b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "45b5e888-3fa5-4089-9b5f-fc18ba018481",
			"key": "host",
			"value": "127.0.0.1:51121",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}