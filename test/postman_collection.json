{
	"info": {
		"_postman_id": "065cde79-c49e-4e4c-bc9f-f0888ad9d464",
		"name": "Controller Testing",
		"description": "iofog-controller collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69735c4d-4b77-48a3-9cb2-5e90e0c79f5f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db42a04e-d2e1-4494-98e2-05f3c3866c01",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Activation code not found\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activationCode\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/activate",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"activate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba6c5991-0aca-44ed-bd6a-e37fa4b7a44b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "676f6347-9786-4710-b51c-f5253573584c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "528b84d0-db36-46b7-bab3-17f15d472931",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend activation email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "254fe6f2-8f7f-4e18-88d4-bbe4041a83f5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/user/signup/resend-activation?email=user@domain.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup",
								"resend-activation"
							],
							"query": [
								{
									"key": "email",
									"value": "user@domain.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cb2287f-fdab-4449-8f6c-a936248233ec",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb880853-e733-48e5-b597-c94f256b82a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa0661cb-3ff7-479f-bdfb-d8d26ea7fced",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Saeid\",\n  \"lastName\": \"Rezaei\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9acfad4-da05-4659-9359-5dcbf54d7629",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"#Bugs4Fun\",\n  \"newPassword\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8af2032-d7bc-426d-b214-20d5ddbc3229",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "User collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fff5cfa6-e663-4071-9594-a74c3244dbf0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "05602044-79fe-4749-88dc-d552b0cf84fa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "General",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88a8d802-a374-4c66-b92d-d496d3115d70",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.status && data.hasOwnProperty('timestamp');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get email activation setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59c01042-233c-4b01-9458-7b5e8ec9d58d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('isEmailActivationEnabled');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/email-activation",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"email-activation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fog types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3316ad51-fde0-492c-93b6-afa6301db04a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.fogTypes;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/fog-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"fog-types"
							]
						}
					},
					"response": []
				}
			],
			"description": "General collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d070c17c-13e1-404c-b471-08ce2781577f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6af1f7eb-aae8-477d-839e-dfddd8252ede",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Agent",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3de2765b-c4a6-4da8-b559-bea22d62ead5",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d8260a3-4ba4-402d-80e0-971dfdb91e14",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea375be7-9bee-4737-b13d-28a5161f6e84",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3291645b-166b-4b4c-92e3-d8431e1f49bb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f162088f-a798-44de-9597-b6b958b23534",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e982b4b7-7f7e-4399-b92e-73c04c3da2d5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.token;",
									"",
									"postman.setGlobalVariable(\"agent-token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"{{provisioning-key}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/provision",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a45396a-1285-43fc-9229-b192e332ebe3",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.networkInterface && data.dockerUrl && data.hasOwnProperty('diskLimit') && data.diskDirectory",
									"&& data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit') ",
									"&& data.logDirectory && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('statusFrequency') && data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('latitude') && data.hasOwnProperty('longitude')",
									"&& data.hasOwnProperty('routerHost') && data.hasOwnProperty('routerPort')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4511ec4d-002e-4d41-9aa6-14df4c82f30b",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Image snapshot not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a06ec153-2abe-4b6c-8fac-bc6800b997ba",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Invalid microservice UUID 'abcedf'\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices/abcedf",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices",
								"abcedf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b6208da-ba4e-4d32-9181-17ec1770c45b",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update hardware info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "638d4bbf-9fa0-4e4d-85b5-b820ddf5c622",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update USB info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c410428-08a4-46bb-9ab3-ea728b420a5e",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tracking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "618a6a27-8df5-4aad-b2ed-64ac45600743",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{agent-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"events\": [\n        {\n            \"uuid\": \"test_tracking\",\n            \"sourceType\": \"agent\",\n            \"timestamp\": 1551694999,\n            \"type\": \"test\",\n            \"data\": {\n                \"event\":\"test\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/tracking",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tracking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08dfa3b9-5212-4297-89eb-89f72517c9c5",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"straceData\": [\r\n    {\r\n      \"microserviceUuid\": \"abcdef\",\r\n      \"buffer\": \"test\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cca3a1b2-599e-40ce-b055-96de27bbd044",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"daemonStatus\": \"RUNNING\",\r\n  \"daemonOperatingDuration\": 15,\r\n  \"daemonLastStart\": 25,\r\n  \"memoryUsage\": 16,\r\n  \"diskUsage\": 14,\r\n  \"cpuUsage\": 17,\r\n  \"memoryViolation\": true,\r\n  \"diskViolation\": true,\r\n  \"cpuViolation\": true,\r\n  \"microserviceStatus\": \"[]\",\r\n  \"repositoryCount\": 5,\r\n  \"repositoryStatus\": \"RUNNING\",\r\n  \"systemTime\": 155,\r\n  \"lastStatusTime\": 166,\r\n  \"ipAddress\": \"192.168.0.1\",\r\n  \"processedMessages\": 255,\r\n  \"microserviceMessageCounts\": \"counts\",\r\n  \"messageSpeed\": 52,\r\n  \"lastCommandTime\": 57,\r\n  \"tunnelStatus\": \"on\",\r\n  \"version\": \"1\",\r\n  \"isReadyToUpgrade\": true,\r\n  \"isReadyToRollback\": true\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfaeaa0c-3c31-486f-b327-72ee980d5f1d",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"ValidationError\" && data.message === \"Invalid content type\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/zip"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9f66872-58da-48ee-87ca-4dd04d82dad4",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"networkInterface\": \"wlan0\",\r\n  \"dockerUrl\": \"http://google.com\",\r\n  \"diskLimit\": 15,\r\n  \"diskDirectory\": \"testDirectoryPath\",\r\n  \"memoryLimit\": 150,\r\n  \"cpuLimit\": 17,\r\n  \"logLimit\": 16,\r\n  \"logDirectory\": \"testLogPath\",\r\n  \"logFileCount\": 7,\r\n  \"statusFrequency\": 35,\r\n  \"changeFrequency\": 36,\r\n  \"deviceScanFrequency\": 37,\r\n  \"watchdogEnabled\": true,\r\n  \"latitude\": 22,\r\n  \"longitude\": 66,\r\n  \"gpsMode\": \"manual\",\r\n \"dockerPruningFrequency\": 35,\r\n  \"availableDiskThreshold\": 95,\r\n  \"logLevel\": \"INFO\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11443c25-d9dd-43a3-85aa-e689145c89cf",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('config') && data.hasOwnProperty('version') && data.hasOwnProperty('reboot')",
									"&& data.hasOwnProperty('deleteNode') && data.hasOwnProperty('microserviceList') && data.hasOwnProperty('microserviceConfig')",
									"&& data.hasOwnProperty('routing') && data.hasOwnProperty('registries') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('diagnostics')",
									"&& data.hasOwnProperty('isImageSnapshot') && data.hasOwnProperty('prune');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config/changes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config",
								"changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent tunnel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "944450c5-9a8c-47dc-bfd0-fdac9a2146f3",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Tunnel not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1c5b32f-4b67-498d-a2f2-3868cfe99b55",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.registries;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get change version command",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93167232-f742-44f2-af13-bedbf60a4811",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Version command not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b86ee15-250d-464d-9fd5-20c48ae35463",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.microservices;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "976cd1de-81f2-4358-b3f4-33c10dc58201",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1796e5e1-44df-4851-855d-04e8e055b375",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c63429d-0d0f-4bb5-870a-7df4f294f0f5",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Agent collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e678105b-8557-44dc-90d5-05156611a405",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3a28e9ec-4a2a-4f17-872c-395d634ef2ea",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "799735e0-59fb-427c-b418-7326ccbd2ab2",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e1e48f7-5465-4c2b-8734-4115bb96b4d3",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee3c5a83-a821-49ea-b24f-8ce6da2504a9",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea5e6bb0-6ba5-44dc-baf5-bbbe3e91c379",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef2155b0-e158-49b1-b0f1-8fa6cdffcd58",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d77ce6d5-4c6d-4572-a89d-ee294c44eeb0",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "227166e4-de0d-47d4-a7e5-5d5e8949ded5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc2\"] = data.from === \"msvc-1\" && data.to === \"msvc-2\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82ae3c1f-0306-4a22-912b-b6db761ee866",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-3\",\n            \"name\": \"m1-2\"\n        },\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-1\",\n            \"name\": \"m1-1\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Application Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1b928af-7bad-4e99-a2f7-fd98b8aa23d7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');",
									"",
									"tests[\"Routes are updated\"] = data.hasOwnProperty('routes') && data.routes.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe2cec9f-549e-485d-8752-5f165925fec3",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc3\"] = data.from === \"msvc-1\" && data.to === \"msvc-3\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b5ad4a1-24bf-4de8-82d4-dad41ba016c7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "571f0ccb-16d4-4b5b-af07-f42e2de6d220",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Description\",\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e23d51ec-d4ca-456d-a30b-84872e48e580",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f783fa73-a68e-46ce-80a0-a1e3d430b5f7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b317c17-2d5b-4679-8ce9-35dc51c08de4",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a98043f5-c5e6-48ac-b9eb-9cb33f8d58f3",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"postman.setGlobalVariable(\"application-name\", \"application-name-22\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff1d71a1-f136-455d-8e62-e0c20ae0ee14",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9f1bae3-f48b-43d6-9096-f89635be0552",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbd4a975-4d4e-4fea-aac4-d870d1d89911",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf3f3618-0ae5-40b6-bde6-ff0fbea60a64",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8146b3af-5726-4120-bc0e-a00ef48f5e93",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36fd7926-c926-4a75-b4fd-6829bed6db64",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49ab2fde-df0e-480c-8f33-45b49a6dd95b",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f05eebcd-9c21-492c-9613-474f9f139e18",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90f29a77-9dc1-447c-ad7e-d80eb638d4aa",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bf2d1468-29a5-4cc8-ae93-cfe3eaf862d7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "755a41e4-d8ac-4f0a-b967-6be01a132f06",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application with template",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb35c446-faa9-48e7-84fc-2fbf2acec5d1",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4ad26aa-290f-47a8-a072-eb08cf1fdf27",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "657b91ac-0dbf-494a-801d-dc00e38fa60b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2cd71aa-1b20-4558-966e-3abb8001885a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id-1\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"node1\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1072c006-c109-4323-8317-f7cc5c08c2f2",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id-2\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"node2\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"host\": \"1.2.3.5\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1afebc06-02b0-49a2-af40-9d4d0ed8ff0e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name-1\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-name-1\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"redistest\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"redis\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"redis\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-name-1\",\n            \"iofogUuid\": \"{{node-id-1}}\",\n            \"rootHostAccess\": false,\n            \"logSize\": 0,\n            \"volumeMappings\": [],\n            \"ports\": [\n                 {\n                    \"internal\": 6379,\n                    \"external\": 6379,\n                    \"publicMode\": false\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1452bbe-5507-4b00-beab-9c1d472efbfa",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-name-2\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [\n                {\n                    \"internal\": 1881,\n                    \"external\": 1882\n                }\n            ],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"sekrittoken\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"http://myproxy:8080/\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\", \\\"sharedToken\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"rulesengineHOST\",\n                    \"value\": \"{%  assign curmsvc= self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first %}{{ curmsvc | findAgent: iofogs | map: \\\"host\\\" }}\"\n                },\n                {\n                    \"key\": \"rulesenginePORT\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"ports\\\" | first | map: \\\"external\\\" | first }}\"\n                },\n                {\n                    \"key\": \"redisHost\",\n                    \"value\": \"{% assign redismsvc = microservices | where: \\\"name\\\", \\\"redistest\\\" | first %}{{ redismsvc | findAgent: iofogs | map: \\\"host\\\"}}:{{ redismsvc | map: \\\"ports\\\" | first | first |map: \\\"external\\\" | first }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56ac0700-3fac-4205-b995-a8b075cd082a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');",
									"",
									"tests[\"msv1 gets env application name\"]=data.microservices[0].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv1 sets env value from another\"]=data.microservices[0].env[3].value === data.microservices[0].env[2].value",
									"",
									"tests[\"msv2 gets env application name\"]=data.microservices[1].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv2 sets env value from env service msvc1\"]=data.microservices[1].env[1].value === data.microservices[0].env[1].value",
									"tests[\"msv2 sets env value from service msvc1\"]=data.microservices[1].env[5].value === data.microservices[0].ports[0].external.toString()",
									"",
									"tests[\"msv2 gets hostname from iofog agent for itself\"]=data.microservices[1].env[4].value === '1.2.3.5'",
									"tests[\"msv2 gets hostname from iofog agent for a service of another app\"]=data.microservices[1].env[6].value === '1.2.3.4:6379'",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b9a575f-2eaa-4134-bf3d-c2fb44c507bf",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f62c22da-b13c-4e9b-8a5f-a133ed296d77",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b36ade2-b923-4d6d-977d-0fbe66a03cbf",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name-1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name-1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0345535c-ab02-488c-9316-1c89bda74a19",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0abe8b96-0bb2-4dfa-a261-897034599f11",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76f80847-a45b-4932-af87-4cb9092520b3",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a0d92e1-b8fb-45cb-b4a0-6434b89f8c4b",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34459afb-099a-43d2-93ed-0e605c709cb6",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91a46eb5-f490-4119-b4d8-05bfb1e8aea6",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id-1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id-1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fd03bad-607d-4435-a162-a1576ad5e74b",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee8746b-bf12-49fa-8a72-6deceb1896f7",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "31153059-f37f-4532-99fe-2cc891130d6b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0038fe34-3173-45a6-95b8-4e186567f9b4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Flow",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b85f9dec-c909-4dd0-9e7b-1d831408e42f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe4c4d3c-9fe0-40d9-8f6b-a068d378c536",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "435a9eab-f2a2-4491-a7c0-3675ce847dba",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6dde8c3-1219-4701-ad71-556e934fc3de",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flow By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d230d9be-c413-4947-9b1c-bfb618c89cd2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6cc6ebf-cdd5-43e0-a1da-c060cf090929",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d3c1a6b-6f36-4109-b09f-7f6ac0a338a6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8eb8cc14-9c7f-424b-ad64-a7f3c8ec03a3",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e935e309-8216-4a32-9d60-2d53d09c8eff",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Flow collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aea239bd-dc38-4f87-a001-50a80fc2e3a2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c163ad5b-1a91-4030-a59a-c2403e06f7f1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c36ba7a-dd09-43b8-ac47-9a677f3bb6ea",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c09fde3-c568-4941-9de0-db7a653706c1",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa7a6559-05cc-407f-bb0e-4f84bdfd22cc",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "decc9ef4-e581-4fa7-84af-e09b515fb5e0",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eae2a0c0-9a71-4c4a-9aec-948b1ae8344a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b981e88-40ea-4640-b960-3144936e499d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id-2\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01c0497f-19a1-4ced-859d-b53fe63383e2",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1ac3577-2d34-4f5f-936a-d2384a8ce0af",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2066bc0-ceab-46ad-be24-5d47c2b3b0dc",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id-2}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0f7c4f3-dc22-4eb0-8746-a3c114a752e9",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd4860e7-a08b-4809-b201-3cb305a5a3d2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37cc7808-9a7d-44cb-9bee-087d70e1945e",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89cf533f-e5c3-434c-801d-d9af369329da",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47de191f-bdcd-4fd5-848f-acc7e10b9073",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "396d89db-e3e4-42e7-ab4b-2d29e16f244c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?flowId={{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "flowId",
									"value": "{{flow-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2f992a8-55a1-43ff-9583-24037747a412",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75e37dc9-77a5-4f3c-b751-f5424088ad91",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f268e932-496b-4f51-bb24-d83e615ad2d0",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e3c1b40-d860-4590-970f-f0d227f97a67",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"images\": [\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 1\n        },\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 2\n        }\n    ],\n    \"registryId\": 2,\n    \"config\": \"string\",\n    \"rebuild\": true,\n    \"iofogUuid\": \"{{node-id}}\",\n    \"rootHostAccess\": true,\n    \"logSize\": 0,\n    \"volumeMappings\": [\n        {\n            \"hostDestination\": \"/var/dest\",\n            \"containerDestination\": \"/var/dest\",\n            \"accessMode\": \"rw\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "369fafae-4a14-4fa2-b303-994848cb3e2a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4bb44d8-1460-41f9-b876-7d4e679414bd",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb411374-a445-4697-91a9-3ba18e574a96",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a75e7f46-fc9f-4ad6-8ea6-b151501cc24d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"images\": [\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 1\n        },\n        {\n            \"containerImage\": \"hello-world-updated\",\n            \"fogTypeId\": 2\n        }\n    ],\n    \"registryId\": 2,\n    \"catalogItemId\": null,\n    \"config\": \"string\",\n    \"rebuild\": true,\n    \"iofogUuid\": \"{{node-id}}\",\n    \"rootHostAccess\": true,\n    \"logSize\": 0,\n    \"volumeMappings\": [\n        {\n            \"hostDestination\": \"/var/dest\",\n            \"containerDestination\": \"/var/dest\",\n            \"accessMode\": \"rw\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2686bce0-9946-41ba-b3d3-c52becd7e256",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4474e422-cb67-45b2-86dd-38f482498955",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n\"sourceMicroserviceUuid\": \"{{ms-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\",\n \"name\": \"my-route\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89752bbb-317f-4b02-90ca-e09ce3086758",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e0463f4-a6d5-4624-a207-df6f461d2903",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3131c21-0e67-4807-87ad-4a6e222fc02c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36b82f1d-f662-4a89-8c9d-7cee26ef845a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "720b540f-ec34-4f75-9780-d63819fe9f23",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4ad6cfa-97f4-4248-8675-4229634b8836",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a8b36a5-f7ff-4c88-8e3e-ff04e2706f69",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c19d837f-a7c6-417f-b8f9-b92a27948a03",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1446ab3-89cc-4565-a5bd-8ff6c2e25389",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a73b791-e66b-465b-911e-5b64a3d81fd0",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "202dca5f-8080-42e7-a7a8-d376392ab8ed",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1695590-020d-41ca-806d-a3a6126a3bfb",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "352c5bd6-9619-490a-8a9b-5c8d971f799b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "491fc799-4399-4684-a8d5-da335fa2348e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b463970a-e2a9-4bcd-a37a-31e501e8fcbc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Catalog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ca8e199-3afe-4208-bfb0-2d299720b8fe",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d60da5b5-861f-4f83-97fa-c94d91276040",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50b2a140-5002-43ea-9117-ea0c20cb2ed7",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47badea1-607a-45db-b9d3-0d37c436f26a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('catalogItems');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "685a0343-3c01-4b89-a386-f87bdd330489",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.category && data.hasOwnProperty('configExample')",
									"&& data.publisher && data.hasOwnProperty('diskRequired') && data.hasOwnProperty('ramRequired') && data.picture && data.hasOwnProperty('isPublic')",
									"&& data.hasOwnProperty('registryId') && data.hasOwnProperty('images') && data.hasOwnProperty('inputType') && data.hasOwnProperty('outputType');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edebad87-d94c-4c8b-ad1a-538f7fa648c1",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9f11b46-7597-4aa9-ad06-c514c6641495",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c280d301-2435-42d7-805a-13c8bdad313c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Catalog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "876ad9b5-d5cb-4b74-8239-19a7ef15aa66",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "094e1e91-132d-42eb-8cba-22566e3173c1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tunnel",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28ce49f2-90d8-4798-aec9-967722c36f1c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9ec6066-802a-4056-9d0f-e5e68861f1d9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a141dcd-03b9-4b39-a01a-afc395dbf9fb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc94916a-4ae5-4130-b6a4-69d1c856e4fa",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"dockerPruningFrequency\": 35,\n  \"availableDiskThreshold\": 95,\n  \"logLevel\": \"INFO\"\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bdf741b-6629-4e6a-9081-1ac869e24fb3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"open\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node SSH Tunnel Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b836942f-b6b7-4f5e-bc44-5844505eebd1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00089f4f-a33d-40c2-ac00-2f9efe0b7041",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"close\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9359573-666a-4d61-b354-c5b25059fe8b",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2521f542-7d8a-43e7-9122-6ea3111cc957",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bafd42d9-5c60-4050-be2f-a7b9e8ccc68e",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tunnel collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a00f6e23-aaa2-4f3d-ae38-fb3b6fd94a90",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "29950385-53b4-4226-8038-5a70d5be1ae3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab86ac35-6592-4335-84e1-98a490257117",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dc8240c-db0b-459f-9904-298d1c4e93c4",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67c7ae03-e304-47c5-aa32-5d2305548f3e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73ddda6f-452c-4dfa-8e2b-390dc5b396e5",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fcf9427-eaa0-4b2f-af99-93baba8dffd1",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4248546a-715a-437e-a4a0-d9b88b815459",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name-2\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4af50ce8-3d34-446e-951a-c93e5c6005a5",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13064d4d-3f92-4fa0-93ad-84713f94c730",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-name\", data.name);",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3351256d-92fc-4c8b-a362-619c6d5e6ef8",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name-2}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "426f8197-cdd2-49a5-8130-6915e71f360b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-name\", data.name);",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa0d6472-8bc9-417b-aaa2-9dd7f91b6fbe",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6cc2d95-971c-45ff-9bd0-53a7e0b244aa",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ccbb8b7-7b62-4b84-8185-57067a4dbf06",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d34d0549-27f4-4e99-813a-0f229e3ff9df",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a7c28a4-32ef-408e-b4d1-de8927777dec",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84f22c90-58da-4d2e-93e8-bd5d753fbfc6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dd13431-d251-4277-b50f-b54c9aa84f34",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82a135a0-4ff9-4b20-a7ed-55e9fbf5e3b9",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da38139f-bfce-4319-848f-e9592965e2cc",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"",
									"postman.setGlobalVariable(\"ms-name\", \"name3\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68d5573c-08a2-4d7b-9c5d-dcf88caf6b79",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7159536-0d28-400d-b60f-41969420c9b0",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f26af10e-b0b7-4749-84a8-b6d0acaabe98",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98027695-e026-45b7-8777-2fe8834f7c0f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"catalogItemId\": null,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf086371-ec31-45d7-8f4d-5a196e935ef8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3013c542-fb59-4464-b426-105e281232db",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"from\": \"{{ms-name}}\",\n \"to\": \"{{ms-name}}\",\n \"name\": \"my-route\",\n \"application\": \"{{application-name}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6db63a4c-e53d-4d5a-b5ba-d96fa979e791",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3529116d-c4d0-4f46-a5bf-0a87a41a5147",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "470a7111-aef3-4179-ab26-a3eafd22307e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f845e201-e286-4811-aae3-fa16f0204b88",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f68494a-1aa0-4e71-9fbf-352e382d16aa",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bbe1a9a-bc24-4471-8c29-ee8a9f6429d8",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04de7d47-1f54-40da-8ca6-06f560c10b89",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b34adfd-f17d-4dd8-ab6e-f5c1dec68b1b",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a34c1367-1ec8-4e35-ab4c-7838403dab15",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "367bc13a-8cd5-408e-83d4-c961faf134f2",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc6bfc4e-2fe4-4917-9c2a-b7422e734aa5",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9d3cbc6-71b8-4ae9-a30d-45ca68e4dda3",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d322896d-212d-4f2e-ba39-72df9bc34349",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "053dcbbe-a6e4-4299-b70d-d10fbe982e4f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "46d429ee-d295-4587-808a-6020bffc1700",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Diagnostics",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b4d13d2-c90a-4a9c-a203-aaf116dc6089",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "406ea586-70dd-4237-bcc3-bcbfd461a7ff",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e11bf146-1b87-4839-93df-f8abcd0468d2",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17fa485c-dc1e-41a8-9a47-4b16de3f2889",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a54e668-0694-40dd-909a-20454a553510",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "448a9ef6-0c92-489e-8b1e-9d6faa3989b3",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59dcb62-8cb7-441d-9b78-f2de4cf59d4c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request to Create Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21a44f26-2c0e-483e-b2f9-d2bff550675e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df21334f-e754-4f75-97f3-fdd81b2fe90d",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === 'ValidationError' && data.message === 'Image snapshot is not available for this microservice.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable/Disable Microservice Strace Option",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4319cad8-7dab-44fe-b9ce-a78812d69e3d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enable\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Strace Data to FTP Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db1a9ad0-780c-4073-88cb-0afac5e5c26d",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ftpHost\": \"string\",\n  \"ftpPort\": 0,\n  \"ftpUser\": \"string\",\n  \"ftpPass\": \"string\",\n  \"ftpDestDir\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Strace Data For Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a20f55a2-46f6-4f96-9325-6b9e6c07218e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('data');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace?format=string",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							],
							"query": [
								{
									"key": "format",
									"value": "string"
								}
							]
						},
						"description": "available formats:\n\t- string\n\t- file"
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a90d24b0-afbc-45df-8d5a-d731dd3d7f4f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}?withCleanUp=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							],
							"query": [
								{
									"key": "withCleanUp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a73090cf-b816-4c46-a77f-dc89f291ae18",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d121432c-02b7-4604-a8c8-a2666286531d",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7263cfc5-da51-4909-987c-b02418472ca7",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3a78e8f-4862-4dcf-afe9-0649a4e9339d",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe797feb-9f05-4875-92f2-eb11857bcae9",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Diagnostics collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e53571a6-79eb-4e43-aa28-d120cb4a0b5d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5d4b9b6b-9906-4781-abb5-4d0d34e696f8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ioFog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f05fae92-1c92-45a2-89c0-d7a45aadb38b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37607bbb-32d7-4906-9ca0-a0647c5c9f38",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0930f870-806b-4f4f-9fbd-19e1d1174778",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5335c5f-4fe6-4e26-bb02-9205f6d7e432",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00f13695-7846-4edf-a820-e67c3886ff6e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "List ioFog Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c36522bb-5356-4f82-aaa7-790ea887eefb",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b800f80-1fa9-425b-a639-a03362b761dd",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"isSystem\": false,\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List system fogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1c4d0f3-7607-4a26-a5b3-e88a5809154e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?system=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "system",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a575f2b3-49a3-456b-8866-d98779417749",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.name && data.location && data.hasOwnProperty('gpsMode') && data.hasOwnProperty('latitude')",
									"&& data.hasOwnProperty('longitude') && data.description && data.hasOwnProperty('lastActive') && data.daemonStatus && data.hasOwnProperty('daemonOperatingDuration') ",
									"&& data.hasOwnProperty('daemonLastStart') && data.hasOwnProperty('memoryUsage') && data.hasOwnProperty('diskUsage') && data.hasOwnProperty('cpuUsage') ",
									"&& data.hasOwnProperty('memoryViolation') && data.hasOwnProperty('diskViolation') && data.hasOwnProperty('cpuViolation') && data.hasOwnProperty('catalogItemStatus')",
									"&& data.hasOwnProperty('repositoryCount') && data.hasOwnProperty('repositoryStatus') && data.hasOwnProperty('systemTime') && data.hasOwnProperty('lastStatusTime')",
									"&& data.hasOwnProperty('ipAddress') && data.hasOwnProperty('processedMessages') && data.hasOwnProperty('catalogItemMessageCounts') && data.hasOwnProperty('messageSpeed')",
									"&& data.hasOwnProperty('lastCommandTime') && data.hasOwnProperty('networkInterface') && data.hasOwnProperty('dockerUrl') && data.hasOwnProperty('diskLimit')",
									"&& data.hasOwnProperty('diskDirectory') && data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit')",
									"&& data.logDirectory && data.hasOwnProperty('bluetoothEnabled') && data.hasOwnProperty('abstractedHardwareEnabled') && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('version') && data.hasOwnProperty('isReadyToUpgrade') && data.hasOwnProperty('isReadyToRollback') && data.hasOwnProperty('statusFrequency')",
									"&& data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId')",
									"&& data.hasOwnProperty('logLevel') && data.hasOwnProperty('dockerPruningFrequency')",
									"&& data.hasOwnProperty('availableDiskThreshold')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId') && data.hasOwnProperty('isSystem');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node Version Command rollback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e55b7de-0491-4563-a610-791bc4bb8c4c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === 'ValidationError' && data.message === 'Can\\'t rollback version now. There are no backups on agent';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/rollback",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"rollback"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Node Version Command upgrade",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c61343d9-c155-49bb-932c-c546e2b6de95",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/upgrade",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"upgrade"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Reboot Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9018c549-41e5-4090-96bf-1feddd43d038",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/reboot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"reboot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prune Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31ef5cac-c58f-49aa-9395-2abe7ebbf9a7",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/prune",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"prune"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL Hardware Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af564edd-ad83-4c87-a643-d3aedf593c76",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL USB Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e959afcd-924e-40fd-ac96-d1815d30b7f0",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9424b68c-d0a4-45c8-83cf-cf96409e2454",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7b5c82a-9e01-41b8-8f8f-3da9111d88b3",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Node Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cfba52a-2e2d-4ed3-ad64-5711720f72a8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response does not contain any node\"] = data.hasOwnProperty('fogs') && data.fogs.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aab4488f-17a5-4798-9a5c-b5eb1e87f240",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "ioFog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9a879b57-0383-4d57-939a-274dbd69ac01",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "336ade08-720c-4cb7-bb2c-575ad2dd0554",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Registries",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90d4206b-ab32-48b3-b450-62f45529c679",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6e890f5-f022-426f-87b4-f960e5163f65",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52636397-b1a0-4464-9651-4204f1dbafec",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"reg-id\", data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string\",\n  \"isPublic\": true,\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"email\": \"test@gmail.com\",\n  \"requiresCert\": false,\n  \"certificate\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6369296b-60fe-48c3-a70e-f21756bc3ac5",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string2\",\n  \"isPublic\": true,\n  \"username\": \"string3\",\n  \"password\": \"string4\",\n  \"email\": \"test2@gmail.com\",\n  \"requiresCert\": true,\n  \"certificate\": \"string6\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf4caaa2-b8a0-4d3b-b7f7-e14a3e734e98",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('registries');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f70e48fb-c2ba-4a91-9236-3ee0b26f9a94",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05719ac5-c32c-4a2a-938d-0b249149c1b2",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Registries collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0de1ae5d-db3f-4ad1-b8d5-223faedfd08e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "74c685f0-45a3-4a6b-afa6-2494f493dbf3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Edge Resources",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "930c0b05-4cc9-4213-8fbd-5cc21f7dada0",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cbe3960-ac14-4859-ac48-7b7e63715bfa",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a270c48-0c61-42b4-a2b6-441f8d8a6d60",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d933ea9-d523-441b-a041-8de414dd07f5",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									"postman.setGlobalVariable(\"node-name\", data.name);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a99335c2-b893-4480-b17e-72dfea230ef9",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3ed2620-865e-4583-b2ed-3be6514880b1",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.token;",
									"",
									"postman.setGlobalVariable(\"agent-token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"{{provisioning-key}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/provision",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d7fa4cc-5b0e-4a59-a8cd-8a155337fc03",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Edge Resource (different version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dc015ca-0ae3-4387-98ae-e19a9f57948a",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.2\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "672f796c-e787-47db-a534-e14440f5e20c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (tests[\"Status code is 200\"]) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door2\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door2\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            },\n            {\n                \"name\": \"version\",\n                \"url\": \"https://localhost:91121/version\",\n                \"method\": \"GET\"\n            }\n        ]\n    },\n    \"orchestrationTags\": [\n        \"orange\",\n        \"smart-door\",\n        \"smart-door-v0.0.1\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d8a43d6-0743-43b9-a6df-d412898b39cc",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door\");",
									"",
									"if (tests[\"Status code is 200\"]) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", \"com.orange.smart-door\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a37dcb5-130b-4e8f-98ad-0125a842b2d3",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains metadata\"] = data.name && data.display && data.display.color && data.display.icon && data.display.name && data.interfaceProtocol && data.interfaceProtocol;",
									"",
									"tests[\"Has interface details\"] = data.interface && data.interface.endpoints && data.interface.endpoints.length === 2",
									"tests[\"Has orchestration tags\"] = data.orchestrationTags && data.orchestrationTags.length === 3"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba47ca74-f6e9-457c-a7aa-5d52585cedab",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uuid\": \"{{node-id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}/link",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c4623f8-a904-4abe-b580-ae1b795d4c42",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('linkedEdgeResources') && data.linkedEdgeResources === true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config/changes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config",
								"changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent linked Edge resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07e77607-4d68-4127-b2ab-c78712a95160",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 1",
									"",
									"if (tests[\"Contains edgeResources\"]) {",
									"    var edgeResource = data.edgeResources[0] ",
									"",
									"    tests[\"Has display information\"] = edgeResource.display && edgeResource.display.name",
									"    tests[\"Has interface\"] = edgeResource.interface && edgeResource.interface.endpoints.length > 0",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/edgeResources",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"edgeResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge resource associated to Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78a18641-3c40-4a7c-bd2e-f448edbb74c3",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 1",
									"",
									"if (tests[\"Contains edgeResources\"]) {",
									"    var edgeResource = data.edgeResources[0] ",
									"",
									"    tests[\"Has display information\"] = edgeResource.display && edgeResource.display.name",
									"    tests[\"Has tags\"] = data.tags && data.tags.length === 3",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlink Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a9f5558-1b7c-4bc3-bdca-1621b3d63e6b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uuid\": \"{{node-id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}/link",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edge resource associated to Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a2f7de1-adfe-4767-8449-bb3e4d80398d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains edgeResources\"] = data.edgeResources && data.edgeResources.length === 0",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Edge Resource version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "226ce5ef-4033-41df-ac48-331ce7052a35",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = !!data.id;",
									"",
									"if (responseCode.code === 200) {",
									"    postman.setGlobalVariable(\"edge-resource-name\", data.name);",
									"    postman.setGlobalVariable(\"edge-resource-version-2\", data.version);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"com.orange.smart-door\",\n    \"version\": \"0.0.2\",\n    \"description\": \"Orange Smart Door\",\n    \"display\": {\n        \"name\": \"Smart Door\",\n        \"icon\": \"help\",\n        \"color\": \"#ff0000\"\n    },\n    \"interfaceProtocol\": \"https\",\n    \"interface\": {\n        \"endpoints\": [\n            {\n                \"name\": \"liveness\",\n                \"url\": \"https://localhost:91121\",\n                \"method\": \"GET\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Edge Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b4c444b-8964-4c18-999d-ef022c3d4aed",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains 2 resources\"] = data.edgeResources && data.edgeResources.length === 2"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResources",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Edge Resources versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bf9e5c1-2067-419e-bbd9-56d42b6b4cfc",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Contains 2 resources\"] = data.edgeResources && data.edgeResources.length === 2",
									"",
									"data = data.edgeResources[0]",
									"",
									"tests[\"Contains metadata\"] = data.name && data.display && data.display.color && data.display.icon && data.display.name && data.interfaceProtocol && data.interfaceProtocol;",
									"",
									"tests[\"Has interface details\"] = data.interface && data.interface.endpoints && data.interface.endpoints.length === 2",
									"tests[\"Has orchestration tags\"] = data.orchestrationTags && data.orchestrationTags.length === 3"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Edge Resource V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "374309ec-123e-4eb1-af74-889ff515d7ba",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Edge Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9979246-ff0e-4178-ae97-b747f290f843",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/edgeResource/{{edge-resource-name}}/{{edge-resource-version}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"edgeResource",
								"{{edge-resource-name}}",
								"{{edge-resource-version}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d134d0c-e4ad-4010-9b1b-565002a5c5ac",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ec71f28-aed4-42a6-8e22-8d6084d4a7b3",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2a5479d-4212-447d-a541-acd872419064",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4258516f-a04a-4949-9f49-18127493b620",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3f7b71d9-161b-418d-bf18-dd5cabfedc6b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "45b5e888-3fa5-4089-9b5f-fc18ba018481",
			"key": "host",
			"value": "127.0.0.1:51121",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}