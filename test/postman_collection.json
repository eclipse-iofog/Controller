{
	"info": {
		"_postman_id": "fad7297e-ee13-470c-9817-57e77a89eb09",
		"name": "Controller Testing",
		"description": "iofog-controller collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a5f3256-05d2-416f-b8bd-1d741654ea5b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e00e01d3-3856-403e-890d-203ed18ffeec",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff2b9f9a-fdfb-4a44-9586-5598cf495f2d",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Activation code not found\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activationCode\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/activate",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"activate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend activation email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8545a35a-3444-4b38-a2fb-26a467ecd89a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/user/signup/resend-activation?email=user@domain.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup",
								"resend-activation"
							],
							"query": [
								{
									"key": "email",
									"value": "user@domain.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd1a1cfb-d5e5-4c1c-bc22-94c007aa359b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ec0b111-64dc-487e-859e-055eee4384c4",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.firstName && data.lastName && data.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Saeid\",\n  \"lastName\": \"Rezaei\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "291cca76-6b97-43af-b63b-85c707cf622d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"#Bugs4Fun\",\n  \"newPassword\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5382dc1d-0209-47c5-ba9d-964e238860f8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6536856d-bde6-4430-bcb7-53d33902ebeb",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "552540ca-61af-4c52-9802-d4d5f09a164d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "366de899-d46d-4ef9-8383-62e8a34e68fd",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "User collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f02e389c-fd11-4ee7-b963-60284e0ce31f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "abed970f-6df0-4835-bb70-56f459e3ed5d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "General",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ac783a2-8ec2-4861-9887-449ff7d1249a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.status && data.hasOwnProperty('timestamp');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get email activation setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f650d5f-339b-452a-b0a7-128577edfb80",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('isEmailActivationEnabled');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/email-activation",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"email-activation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fog types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbe545f0-8abc-41d0-8a2c-d49b6f090c95",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.fogTypes;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v3/fog-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"fog-types"
							]
						}
					},
					"response": []
				}
			],
			"description": "General collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5ea533ab-3614-4d82-8613-40e22fafce52",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a38274cd-2c1e-4a22-ab28-71792e961137",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Agent",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1697a6af-9a17-4716-8441-971817fd7f5f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b811b062-f2c5-472e-99ec-27d440be5aa6",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4fc4d24-1760-4b6c-a81a-a84a02e82f57",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c008477-8329-4e2b-bbf5-8acb78c0fb92",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3aa98a37-c4b8-4fc4-b6d0-18701c1949a9",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent provision",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f4007a5-61d9-49f1-bac3-aacaa860331d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.token;",
									"",
									"postman.setGlobalVariable(\"agent-token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"{{provisioning-key}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/provision",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30e906cf-7b3f-4415-8c7a-d835ff922f3b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.networkInterface && data.dockerUrl && data.hasOwnProperty('diskLimit') && data.diskDirectory",
									"&& data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit') ",
									"&& data.logDirectory && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('statusFrequency') && data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('latitude') && data.hasOwnProperty('longitude')",
									"&& data.hasOwnProperty('routerHost') && data.hasOwnProperty('routerPort')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169936ee-4d48-4328-b8c5-b18b8c768d8a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"networkInterface\": \"wlan0\",\r\n  \"dockerUrl\": \"http://google.com\",\r\n  \"diskLimit\": 15,\r\n  \"diskDirectory\": \"testDirectoryPath\",\r\n  \"memoryLimit\": 150,\r\n  \"cpuLimit\": 17,\r\n  \"logLimit\": 16,\r\n  \"logDirectory\": \"testLogPath\",\r\n  \"logFileCount\": 7,\r\n  \"statusFrequency\": 35,\r\n  \"changeFrequency\": 36,\r\n  \"deviceScanFrequency\": 37,\r\n  \"watchdogEnabled\": true,\r\n  \"latitude\": 22,\r\n  \"longitude\": 66,\r\n  \"gpsMode\": \"manual\",\r\n \"dockerPruningFrequency\": 35,\r\n  \"availableDiskThreshold\": 95,\r\n  \"logLevel\": \"INFO\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/config",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent config changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a573d69c-9c3a-4b28-acb7-a57c3d2792ee",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('config') && data.hasOwnProperty('version') && data.hasOwnProperty('reboot')",
									"&& data.hasOwnProperty('deleteNode') && data.hasOwnProperty('microserviceList') && data.hasOwnProperty('microserviceConfig')",
									"&& data.hasOwnProperty('routing') && data.hasOwnProperty('registries') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('diagnostics')",
									"&& data.hasOwnProperty('isImageSnapshot') && data.hasOwnProperty('prune');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/config/changes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"config",
								"changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update agent status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fda34974-5e3a-4dc4-9327-fa26a56f7178",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"daemonStatus\": \"RUNNING\",\r\n  \"daemonOperatingDuration\": 15,\r\n  \"daemonLastStart\": 25,\r\n  \"memoryUsage\": 16,\r\n  \"diskUsage\": 14,\r\n  \"cpuUsage\": 17,\r\n  \"memoryViolation\": true,\r\n  \"diskViolation\": true,\r\n  \"cpuViolation\": true,\r\n  \"microserviceStatus\": \"[]\",\r\n  \"repositoryCount\": 5,\r\n  \"repositoryStatus\": \"RUNNING\",\r\n  \"systemTime\": 155,\r\n  \"lastStatusTime\": 166,\r\n  \"ipAddress\": \"192.168.0.1\",\r\n  \"processedMessages\": 255,\r\n  \"microserviceMessageCounts\": \"counts\",\r\n  \"messageSpeed\": 52,\r\n  \"lastCommandTime\": 57,\r\n  \"tunnelStatus\": \"on\",\r\n  \"version\": \"1\",\r\n  \"isReadyToUpgrade\": true,\r\n  \"isReadyToRollback\": true\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/status",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ea4efd8-04aa-4fc3-81a2-d9972c034ab9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.microservices;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f52e34fe-25ae-4ab9-a3d1-e26211462d84",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Invalid microservice UUID 'abcedf'\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/microservices/abcedf",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"microservices",
								"abcedf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1553ac12-1813-4017-90b9-1725e41cacb4",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.registries;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent tunnel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3d84ad1-d7b3-4606-b928-e2821bf7535e",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Tunnel not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f026c7e7-f7f1-45a0-9594-9cd763dc816f",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put agent strace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3266c63e-6b90-4d1c-918f-9082a4403aa8",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"straceData\": [\r\n    {\r\n      \"microserviceUuid\": \"abcdef\",\r\n      \"buffer\": \"test\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get change version command",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27b397e7-f456-4685-8c02-d739640e3faa",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Version command not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update hardware info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d7ecca3-4b4b-42af-b491-30cabe6a81ef",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update USB info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc47ad15-52d7-479b-9ced-7b6e8954f3d6",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76f1b33d-a08c-4315-bdef-5db04b8a1138",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"NotFoundError\" && data.message === \"Image snapshot not found\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update image snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "855ed8ff-c82f-413b-acfd-ae9f3fb118ff",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === \"ValidationError\" && data.message === \"Invalid content type\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/zip"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{agent-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"info\": \"testData2\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tracking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15bc0c72-6060-48cc-8d28-f8c1ec97e87b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{agent-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"events\": [\n        {\n            \"uuid\": \"test_tracking\",\n            \"sourceType\": \"agent\",\n            \"timestamp\": 1551694999,\n            \"type\": \"test\",\n            \"data\": {\n                \"event\":\"test\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/agent/tracking",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"agent",
								"tracking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cba6c678-2c18-42de-b730-d0f48d494404",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30314fb3-351e-4710-ba64-aa66adb1eece",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6edd8f4-4b1f-457a-b708-760a1f368807",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Agent collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "97c4088e-d99f-4c9e-ac6d-e8c784c0add5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "57aaeb40-91c7-48fb-b9dd-ad58883899f1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4fce0ec1-c948-46d5-b4ca-bf6287082281",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2a0a77f-08c2-4740-9380-c46535c1d800",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c810ab79-9a32-4f92-88e1-d724fd10bf1e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22d1a6e8-cd99-4cbc-8765-7f8a3971d558",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "013d9e3f-6173-48b9-a9ea-4d2dc492a5b1",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69c9174f-8e33-419e-af2c-6c3cf4a891e4",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfcd0831-d9a7-40ec-be59-c88e16e15994",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc2\"] = data.from === \"msvc-1\" && data.to === \"msvc-2\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39e1e85f-163b-429a-bb64-d764c638c4a9",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-3\",\n            \"name\": \"m1-2\"\n        },\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-1\",\n            \"name\": \"m1-1\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Application Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9bc9bc2-dda3-49cc-bae0-db461e3e6399",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');",
									"",
									"tests[\"Routes are updated\"] = data.hasOwnProperty('routes') && data.routes.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39d936e2-1f29-44dc-87d4-6ab2a512975e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name && data.application === pm.globals.get(\"application-msvc-name\");",
									"tests[\"Route is from msvc1 to msvc3\"] = data.from === \"msvc-1\" && data.to === \"msvc-3\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/routes/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c26e7499-c900-4467-b26d-99d2ee25ad50",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7e9c71e-7637-4c23-836d-0182c004b392",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Description\",\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f68c1a9c-6448-482f-b4d9-7f9aa43503a9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2cff2c8-ad0e-4290-8787-6a88a79b7a0c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "613cc57d-51e8-4c74-a46f-65217c6c8eca",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fd02134-141f-4853-bd16-88daebc19f4b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"postman.setGlobalVariable(\"application-name\", \"application-name-22\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a0a0e9d-876f-43a4-8934-3f310fc7c246",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02d4c98f-3f3f-49a5-8c38-70dc6c849b2f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69727ffb-b21c-456c-969e-a9d19b6b308a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b03b8a91-1b20-4acd-a70a-109164192f9e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ac54df4-cdd4-4591-ae0a-b0dc4cfd6171",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e8d1768-0a39-4106-870d-a14ce54fd69d",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eb1ac37-6c96-4140-a384-ac676427209d",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc4e66e9-80d1-4e07-9912-87e6784a49aa",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c02ba525-0806-4f47-aa33-7cbba0ae70bd",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "311c683e-43e7-4685-86e8-86b4c3dd156d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b7969322-6bc7-42be-8a21-3b54f9049f36",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application with template",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "facb230a-87b3-44c3-99cd-5bb392510a49",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6085f00-0087-47bc-89c8-04a67cbed966",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c61d65d4-5892-4879-877b-3f39eb10b46d",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ce5ac8b-11f0-4160-8f2a-d48af321daeb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id-1\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"node1\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "366adebe-4b67-49fd-a649-dca29702bfeb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id-2\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"node2\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"host\": \"1.2.3.5\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b62769d1-c82a-4b52-93c5-a71cc64ee092",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name-1\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-name-1\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"redistest\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"redis\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"redis\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"application-name-1\",\n            \"iofogUuid\": \"{{node-id-1}}\",\n            \"rootHostAccess\": false,\n            \"logSize\": 0,\n            \"volumeMappings\": [],\n            \"ports\": [\n                 {\n                    \"internal\": 6379,\n                    \"external\": 6379,\n                    \"publicMode\": false\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application with microservices and routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08a242ca-b568-45f8-9678-2c623d0ebfbb",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-msvc-name\", data.name);",
									"postman.setGlobalVariable(\"application-name-2\", data.name);",
									"postman.setGlobalVariable(\"application-route-name\", \"m1-2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"application-msvc-name\",\n    \"isSystem\": false,\n    \"description\": \"Description\",\n    \"isActivated\": true,\n    \"microservices\": [\n        {\n            \"name\": \"msvc-1\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [\n                {\n                    \"internal\": 1881,\n                    \"external\": 1882\n                }\n            ],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"sekrittoken\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"http://myproxy:8080/\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-2\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                { \n                    \"key\": \"selfname\",\n                    \"value\": \"{{ self.name | upcase }}\"\n                },\n                {\n                    \"key\": \"sharedToken\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\", \\\"sharedToken\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"http_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"https_proxy\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"env\\\" | first | where: \\\"key\\\" , \\\"http_proxy\\\" | first | map: \\\"value\\\" | first }}\"\n                },\n                {\n                    \"key\": \"rulesengineHOST\",\n                    \"value\": \"{%  assign curmsvc= self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first %}{{ curmsvc | findAgent: iofogs | map: \\\"host\\\" }}\"\n                },\n                {\n                    \"key\": \"rulesenginePORT\",\n                    \"value\": \"{{ self.microservices | where: \\\"name\\\", \\\"msvc-1\\\" | first | map: \\\"ports\\\" | first | map: \\\"external\\\" | first }}\"\n                },\n                {\n                    \"key\": \"redisHost\",\n                    \"value\": \"{% assign redismsvc = microservices | where: \\\"name\\\", \\\"redistest\\\" | first %}{{ redismsvc | findAgent: iofogs | map: \\\"host\\\"}}:{{ redismsvc | map: \\\"ports\\\" | first | first |map: \\\"external\\\" | first }}\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        },\n        {\n            \"name\": \"msvc-3\",\n            \"config\": \"string\",\n            \"images\": [\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 1\n                },\n                {\n                    \"containerImage\": \"hello-world\",\n                    \"fogTypeId\": 2\n                }\n            ],\n            \"registryId\": 1,\n            \"application\": \"{{application-name-2}}\",\n            \"iofogUuid\": \"{{node-id-2}}\",\n            \"rootHostAccess\": true,\n            \"logSize\": 0,\n            \"volumeMappings\": [\n                {\n                    \"hostDestination\": \"/var/dest\",\n                    \"containerDestination\": \"/var/dest\",\n                    \"accessMode\": \"rw\"\n                }\n            ],\n            \"ports\": [],\n            \"routes\": [],\n            \"env\": [\n                {\n                    \"key\": \"KEY1\",\n                    \"value\": \"value1\"\n                },\n                {\n                    \"key\": \"KEY2\",\n                    \"value\": \"value2\"\n                }\n            ],\n            \"cmd\": [\n                \"test\",\n                \"--arg1\",\n                \"--arg2\"\n            ]\n        }\n    ],\n    \"routes\": [\n        {\n            \"from\": \"msvc-1\",\n            \"to\": \"msvc-2\",\n            \"name\": \"m1-2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices From application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f18d7dc1-5ad7-4e4b-b170-e5a0938a6f0b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');",
									"",
									"tests[\"msv1 gets env application name\"]=data.microservices[0].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv1 sets env value from another\"]=data.microservices[0].env[3].value === data.microservices[0].env[2].value",
									"",
									"tests[\"msv2 gets env application name\"]=data.microservices[1].env[0].value === pm.globals.get(\"application-msvc-name\").toUpperCase()",
									"tests[\"msv2 sets env value from env service msvc1\"]=data.microservices[1].env[1].value === data.microservices[0].env[1].value",
									"tests[\"msv2 sets env value from service msvc1\"]=data.microservices[1].env[5].value === data.microservices[0].ports[0].external.toString()",
									"",
									"tests[\"msv2 gets hostname from iofog agent for itself\"]=data.microservices[1].env[4].value === '1.2.3.5'",
									"tests[\"msv2 gets hostname from iofog agent for a service of another app\"]=data.microservices[1].env[6].value === '1.2.3.4:6379'",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-msvc-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f09a92b-8d4f-44c8-ae53-b9fe9a11b42b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c362e84-4432-4f87-afde-db1cc029fe66",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e667a12-d1ce-4cdf-b387-1c272bf7dedc",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name-1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name-1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application With microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9659bd4-f021-47fb-bcf0-8008a79ce627",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-msvc-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-msvc-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaf60b72-54f3-4f29-a020-23e62c296b7c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('applications') && data.applications.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f54477e-7191-477e-bf0a-51689dc2682a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34747af6-c8d6-4d6c-b382-bf13f0c7b697",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/route/{{application-route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"route",
								"{{application-route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a5acdb1-6e89-4357-b0c7-97bbe6ca867a",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0343b1f6-547d-4760-b2e1-2c099079e66f",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id-1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id-1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c20f2ae3-caef-48d0-8455-884817ca01bf",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id-2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "812c34ee-9057-44f2-a7d5-0ea678777b20",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Application collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aa47505f-a64a-48d6-aba2-bb405a0ecc3b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "51427e8c-4ed6-4b1d-ac68-577ef2912ae0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Flow",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b21d813-4789-4b05-b109-2c94b3ee2036",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78362d3c-36e8-4030-b26d-31eb88e7ca8d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91707c64-11c3-4dc9-b515-e00d10af4236",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n \"isSystem\": false,\n \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf152dca-1d0e-43ec-82ad-94cbcc19c641",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length > 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flow By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf850399-3a89-42fb-869d-c1982628c503",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.hasOwnProperty('isActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2e8e9dc-5a48-484c-b1de-765075f92ea1",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-22\",\n  \"isSystem\": true,\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flows without system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a779f5b3-c046-42cd-b5de-91d29a89bb06",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('flows') && data.flows.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42b5ac94-dd2b-479d-8b9c-d1009918387c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "def23e79-c826-4c0b-b575-22c39c9e04b1",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Flow collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c36cf0c4-b607-42b5-b596-251f29dc303d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "55043625-fb2e-46b5-927f-b5387d6f10a8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Legacy: Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e91e64f-8405-4e04-94df-2fd96e7e7fba",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7c181b4-94ea-4693-8e77-1835b47aeff0",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b7b6506-78b8-4eac-8a49-a78a4f4ff29f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76f8b2e6-d81f-464f-a03a-e56e24ac9fd5",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e26fccd-841d-46ff-93a3-6dbf69a8b178",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f46efc81-d6aa-4a82-843e-d16eec3d683c",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"flow-id-2\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"flow-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/flow",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "738e45d9-a196-4f78-b42c-e7d0e7bd9cde",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64f942f5-2cc7-464d-a5ae-5478404a830f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0f17384-3c77-4d6f-9e91-366dda5d767b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id-2}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df0a71a7-045a-4b9f-b7e2-a10a6f18e67b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"flowId\": {{flow-id}},\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0305392f-7192-465e-aadb-70f47dff3c95",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c739fd05-c7fd-41fc-b6f5-5c578c4a8e01",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"sourceMicroserviceUuid\": \"{{ms-no-catalog-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43ff93f7-4d04-4675-acdf-04dee817727f",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38d5ae28-b038-462c-8ff7-1741e7882a38",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f483dea-8d49-48d5-b870-0b4b9e0c0d3c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?flowId={{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "flowId",
									"value": "{{flow-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dfa5f65-c1b7-412f-8b10-281478523ea7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f66dede-f368-4a1c-be3c-9ffe6b216908",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db0f5f31-3f51-46c9-8fd8-f933d0a86433",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fc90504-5d4c-4c94-8cc0-89634f31e36a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75162440-a551-4b39-9513-404c1dd88936",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81d5db4c-2cce-4a53-8b1c-2b35de6e03a6",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "219cff8d-94df-4a2c-9149-4641f0e666d9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da7370a-d7b4-4192-a705-d38f1c72325e",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"catalogItemId\": null,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a9217b0-f93f-4169-b5a5-b59162f20061",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94b1470a-1921-4952-9288-e508ec88c4a7",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n\"sourceMicroserviceUuid\": \"{{ms-id}}\",\n \"destMicroserviceUuid\": \"{{ms-id}}\",\n \"name\": \"my-route\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49464f02-3f3c-45c9-b584-3c922391df3b",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4930a7b3-cc2d-4e80-bbc1-3ac1d7b3b221",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a7eaf15-06fb-4dfd-929f-c40d8d83e73a",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb9f4ddd-75a2-41d4-93d1-69b8bf4f0765",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f62cf6b7-15d6-43b6-a9e5-4eee031af7da",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ddc6b83-d8cd-46bf-969b-2116d2cdf706",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0f918d7-388a-4bb2-bf99-8e20e340a5cc",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb3ed671-8276-49ab-8e94-7add2c4103df",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "285821c4-11aa-4db1-96df-9554f9bb53f6",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/flow/{{flow-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"flow",
								"{{flow-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "159ffd6c-95a8-48a4-9a6e-0cdebfdff080",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "805f63fe-805c-48bf-a1f9-43239649704c",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "948b0f2c-3219-49ae-acdb-e6fe2a7af2e2",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3cc01cf-fd58-4cae-b114-8b12bb33f924",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c1771409-d0c9-401b-8557-6cceefb59fff",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b50f2fb0-138f-483f-87f7-7c1646ff46b2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Catalog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18bf0944-b49a-467b-b2ae-3b86f0ed9704",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fe5351d-5bc2-43e4-a1da-1ddbc7c78fcc",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63e8965f-f0ab-46a0-b1b2-3812ca50458b",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59dce8b-d300-47b4-93c8-fd56bc3d5c8d",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('catalogItems');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79a42db8-d300-405b-8076-35bb8ad85671",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id') && data.name && data.description && data.category && data.hasOwnProperty('configExample')",
									"&& data.publisher && data.hasOwnProperty('diskRequired') && data.hasOwnProperty('ramRequired') && data.picture && data.hasOwnProperty('isPublic')",
									"&& data.hasOwnProperty('registryId') && data.hasOwnProperty('images') && data.hasOwnProperty('inputType') && data.hasOwnProperty('outputType');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cb2f7be-0d43-45f3-bdff-cc71c8c742cb",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7703afb9-b23c-49d4-b060-71eec5b190de",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad803214-6df7-4b05-b344-10f88d420886",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Catalog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0f723a08-3ff2-40a7-bc66-d85a3c8cae1c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e400ddce-9bbc-431c-9a01-5b7a2983bbb2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tunnel",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5aa34ab-ab81-4cf9-b36c-268b3269a1ae",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5bcc797-12bb-48e5-9587-18b1227f56d5",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee964295-85c7-43bc-8349-a01df40ea2be",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8018166-f9b8-4661-8195-5020db9aba8e",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1,\n  \"dockerPruningFrequency\": 35,\n  \"availableDiskThreshold\": 95,\n  \"logLevel\": \"INFO\"\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5ad6e59-1d53-4980-a1ed-52e612e19dbb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"open\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node SSH Tunnel Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d9b28f5-c243-42bb-b31b-b0b611489c49",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close SSH Tunnel To ioFog Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e57fcd90-7225-4b0c-a862-9f8b362a3a1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"close\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/tunnel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"tunnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e36e3dd-9067-4f50-8a95-6ae2d4da3b48",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "125d103f-cb37-4d02-bad9-c326ccc91c09",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de51a9ab-c464-4b9f-9b65-c6da451c415a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tunnel collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b8a52a0f-0e63-40ca-b30c-20334ec39c92",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6653bbd7-12ce-4245-aa21-4c4a91d90092",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Microservices",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe6a86f-4f51-4cc5-a47b-cd3943fb805a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26d834ab-c8cc-4f1d-9203-dd605719ee8e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4583d8b-6098-4304-b087-f2978fd6ec92",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f7f8900-ac1a-4d68-ac21-69db774b9d5f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf224dad-c015-4f14-8b6a-984cdb3380c0",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c720baa1-e745-4cbf-ac6f-0130ad509e5f",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name-2\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name-second\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99e939bd-0dc6-43ed-b9ca-cec0d9c6b087",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8045bee3-756e-4a73-967f-1f9b215d75a1",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-name\", data.name);",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog in second application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0c4d12a-2fd1-420a-aced-bd8701b77821",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"namesec\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name-2}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice without catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "330b962a-4b1f-4fee-bef5-22b8bfb14424",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-no-catalog-name\", data.name);",
									"postman.setGlobalVariable(\"ms-no-catalog-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name-without-catalog\",\n  \"config\": \"string\",\n  \"images\": [{\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 1,\n \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 2,\n      \"external\": 2,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ],\n  \"env\": [\n    {\n      \"key\": \"KEY1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"KEY2\",\n      \"value\": \"value2\"\n    }\n  ],\n  \"cmd\": [\n  \t\"test\",\n  \t\"--arg1\",\n  \t\"--arg2\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc4cd217-2d34-4dfd-8f70-4d497ddd25ec",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name;",
									"",
									"postman.setGlobalVariable(\"route-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfb0e7f9-b06f-4f0c-9219-7b999a4d9731",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"postman.setGlobalVariable(\"route-name\", \"route-name-updated\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"route-name-updated\",\n \"from\": \"{{ms-no-catalog-name}}\",\n \"to\": \"{{ms-name}}\",\n \"application\": \"{{application-name}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24d327ba-82fc-43d8-b656-3d4ea914e3ef",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4701c634-1fa0-4f25-85d6-f6496b679ec2",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains three microservices\"] = data.microservices.length === 3;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e93d2073-d331-4c8f-8125-b6aa6f0ebdef",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response has microservices property\"] = data.hasOwnProperty('microservices');",
									"",
									"tests[\"Response contains two microservices\"] = data.microservices.length === 2;",
									"",
									"tests[\"Response returns microservice status\"] = data.microservices[0].hasOwnProperty('status');",
									"",
									"tests[\"Microservice status has default value\"] = data.microservices[0].status.status === 'QUEUED';",
									"",
									"tests[\"Response returns microservice percentage\"] = data.microservices[0].status.hasOwnProperty('percentage');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices?application={{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							],
							"query": [
								{
									"key": "application",
									"value": "{{application-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c8e1b8b-c60d-46f2-8d4e-0c6c38e72d33",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "108c6a76-f465-4531-bd63-0e9de0d5f159",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef507915-52e4-4372-ba97-071ba8a27e84",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"",
									"",
									"postman.setGlobalVariable(\"ms-name\", \"name3\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name3\",\n  \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddd0da82-5707-4c7d-b415-7a3dbb101b5a",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60fd56b7-94c1-4629-8272-6a12c20eb22c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2 && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item to give it a catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6eca593-554c-47b3-b752-1e7bb0f0a1b2",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"catalogItemId\": 14,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice with catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a19d9be0-a6e7-4b80-94da-f99069c065c8",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 0 && data.hasOwnProperty('catalogItemId') && data.catalogItemId === 14 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Microservice without catalog item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95cea8d9-07df-410a-9df7-fad148347853",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"images\": [{\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 1}, {\"containerImage\": \"hello-world-updated\"\n,\"fogTypeId\": 2}]\n, \"registryId\": 2,\n \"catalogItemId\": null,\n \"config\": \"string\",\n  \"rebuild\": true,\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Microservice again without catalog By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6519ca9-8c69-43a3-acb7-621a37014e85",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.config && data.name && data.hasOwnProperty('rootHostAccess') && data.hasOwnProperty('images') && data.images.length === 2  && data.images[0].containerImage === \"hello-world-updated\" && data.hasOwnProperty('catalogItemId') && data.catalogItemId === null && data.hasOwnProperty('registryId') && data.registryId === 2 && data.hasOwnProperty('logSize') && data.hasOwnProperty('env') && data.env.length === 2 && data.hasOwnProperty('cmd') && data.cmd.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-no-catalog-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-no-catalog-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Route From Microservice to Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab62411a-3701-468d-b7e8-5c1638be583e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.name",
									"",
									"postman.setGlobalVariable(\"route-id\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"from\": \"{{ms-name}}\",\n \"to\": \"{{ms-name}}\",\n \"name\": \"my-route\",\n \"application\": \"{{application-name}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/routes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b7443d6-6309-4788-bc91-adffba3d8003",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/routes/{{route-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"routes",
								"{{route-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Port Mapping to Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75845ff5-897d-4369-a4bc-39afe2e8c5e3",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"internal\": 15,\n  \"external\": 155,\n  \"publicMode\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19f38d32-39ad-4e7f-b407-2c1a477ea751",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('ports');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Port Mapping By Provided Internal Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76d0277c-a103-4eb2-867d-ec50d5fd8eb7",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/port-mapping/15",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"port-mapping",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7149942e-be0a-435e-a882-9ae6a40e3b99",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"",
									"postman.setGlobalVariable(\"volume-id\", data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"hostDestination\": \"/var/dest7\",\n     \"containerDestination\": \"/var/dest\",\n     \"accessMode\": \"rw\"\n }"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "List volume mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ade1e5f-ae12-4f71-a67e-7d9f63392a58",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('volumeMappings');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete volume mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cd93d42-1069-4b60-b89c-982e25ec7f30",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/volume-mapping/{{volume-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"volume-mapping",
								"{{volume-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a46687b9-50a1-45f5-9065-f9bc1f296601",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"withCleanup\": false\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a814c4db-83fa-4d76-8313-175b30818984",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f767ea8e-3d41-4a16-811c-e3e0aea2ceae",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa664de4-6bc0-4f92-abe9-e56807617ca6",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b180738-8be8-4aa1-ae14-f366a2d17057",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "809b2e28-143a-499b-b3a7-22444c170ed8",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Microservices collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "47a2291e-8b2b-4441-8de7-22b6949956b1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cfe1653e-52b9-4321-9f93-72893fc0a0f9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Diagnostics",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cc3f152-f4f1-4a8c-b237-8f0f9d2648ce",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e15debb5-0705-4a77-83c1-dd8d15f1e522",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7aa69a1c-7ed1-4ad3-af41-f1daeb9096de",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c6ae2f7-99e5-49d7-b7c1-2a39f42bda98",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "686a580d-9350-45c9-8a25-e92b5c7263e0",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"application-name\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"application-name\",\n  \"description\": \"Description\",\n  \"isActivated\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/application",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Catalog Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4cf8e31-7c35-4686-92fd-ded3b94c6ead",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"item-id\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"images\": [\n    {\n      \"containerImage\": \"x86 docker image name\",\n      \"fogTypeId\": 1\n    },\n    {\n      \"containerImage\": \"ARM docker image name\",\n      \"fogTypeId\": 2\n    }\n  ],\n  \"publisher\": \"string\",\n  \"diskRequired\": 0,\n  \"ramRequired\": 0,\n  \"picture\": \"string\",\n  \"isPublic\": true,\n  \"registryId\": 1,\n  \"inputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"outputType\": {\n    \"infoType\": \"string\",\n    \"infoFormat\": \"string\"\n  },\n  \"configExample\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "031359ff-794f-4f37-bce1-57e909c2a2c3",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"ms-id\", data.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"name2\",\n  \"config\": \"string\",\n  \"catalogItemId\": {{item-id}},\n  \"application\": \"{{application-name}}\",\n  \"iofogUuid\": \"{{node-id}}\",\n  \"rootHostAccess\": true,\n  \"logSize\": 0,\n  \"volumeMappings\": [\n    {\n      \"hostDestination\": \"/var/dest\",\n      \"containerDestination\": \"/var/dest\",\n      \"accessMode\": \"rw\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"internal\": 1,\n      \"external\": 1,\n      \"publicMode\": false\n    }\n  ],\n  \"routes\": [\n  ]\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request to Create Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad9a9f4e-f4d6-4e98-a367-09acefb0de23",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Image Snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2161253c-7c0c-40ca-abf7-1ab0e50f1975",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is valid\"] = data.name === 'ValidationError' && data.message === 'Image snapshot is not available for this microservice.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/image-snapshot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"image-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable/Disable Microservice Strace Option",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "658b04ee-49a6-41d0-a9de-23cef15614fb",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enable\": true\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Strace Data For Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e3d5fbf-a423-474f-9949-5bbcfdd09793",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('data');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace?format=string",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							],
							"query": [
								{
									"key": "format",
									"value": "string"
								}
							]
						},
						"description": "available formats:\n\t- string\n\t- file"
					},
					"response": []
				},
				{
					"name": "Post Strace Data to FTP Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc6af464-d64e-4d9d-8c49-79f73cb6ca56",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ftpHost\": \"string\",\n  \"ftpPort\": 0,\n  \"ftpUser\": \"string\",\n  \"ftpPass\": \"string\",\n  \"ftpDestDir\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}/strace",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}",
								"strace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Microservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb6b2fcb-4895-49eb-9a79-8df5ccae4cf8",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/microservices/{{ms-id}}?withCleanUp=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"microservices",
								"{{ms-id}}"
							],
							"query": [
								{
									"key": "withCleanUp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1de57da4-8ded-48f4-910b-1e90ccc49307",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/application/{{application-name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"application",
								"{{application-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Catalog Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6152bf3b-22e6-49b5-b6ed-6d8a7a652a08",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/catalog/microservices/{{item-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"catalog",
								"microservices",
								"{{item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b7b710f-4b11-4be0-a950-63fad5e2b50a",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1210e869-e7fe-4b7e-afe9-0e9764e31d13",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e75d88da-9543-42e7-9f7e-ff4495a72e0c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Diagnostics collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c8d8bf6b-ef88-4c24-b345-bb51edbfb5eb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dd28cb65-d105-469c-808a-dceee41447f3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ioFog",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef3a8fd1-4969-4398-b14c-ea53f250d8e9",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2e36ca1-4e96-46cf-882b-0ba18f8a600b",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "597e4e8d-6f45-4ef6-a116-6dc949325cfc",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"system-node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"system node\",\n \"routerMode\": \"interior\",\n \"messagingPort\": 5672,\n \"edgeRouterPort\": 56722,\n  \"interRouterPort\": 56721,\n \"host\": \"localhost\",\n \"isSystem\": true,\n \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab1229a0-183c-4616-ae81-91248c0c8fd3",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid;",
									"",
									"postman.setGlobalVariable(\"node-id\", data.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n \"host\": \"1.2.3.4\",\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n,\n  \"host\": \"1.2.3.4\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provisioning Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f50ff1db-5d6f-4c75-b197-5f1242638162",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.key;",
									"",
									"postman.setGlobalVariable(\"provisioning-key\", data.key);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/provisioning-key",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"provisioning-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "List ioFog Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0cdcad3e-8b0d-41bb-9a37-3d6a856689e9",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dac445e-605c-4ceb-9cd9-c263eb63c258",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\",\n  \"isSystem\": false,\n  \"location\": \"string\",\n  \"latitude\": 0,\n  \"longitude\": 0,\n  \"description\": \"string\",\n  \"dockerUrl\": \"string\",\n  \"diskLimit\": 0,\n  \"diskDirectory\": \"string\",\n  \"memoryLimit\": 0,\n  \"cpuLimit\": 0,\n  \"logLimit\": 0,\n  \"logDirectory\": \"string\",\n  \"logFileCount\": 0,\n  \"statusFrequency\": 0,\n  \"changeFrequency\": 0,\n  \"deviceScanFrequency\": 0,\n  \"bluetoothEnabled\": false,\n  \"watchdogEnabled\": true,\n  \"abstractedHardwareEnabled\": false,\n  \"fogType\": 1\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List system fogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "992d39ba-1c7e-4c24-be0a-684cca91af79",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('fogs') && data.fogs.length === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?system=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "system",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3829be27-7f03-4576-aaa3-a1bc6f94aaed",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.uuid && data.name && data.location && data.hasOwnProperty('gpsMode') && data.hasOwnProperty('latitude')",
									"&& data.hasOwnProperty('longitude') && data.description && data.hasOwnProperty('lastActive') && data.daemonStatus && data.hasOwnProperty('daemonOperatingDuration') ",
									"&& data.hasOwnProperty('daemonLastStart') && data.hasOwnProperty('memoryUsage') && data.hasOwnProperty('diskUsage') && data.hasOwnProperty('cpuUsage') ",
									"&& data.hasOwnProperty('memoryViolation') && data.hasOwnProperty('diskViolation') && data.hasOwnProperty('cpuViolation') && data.hasOwnProperty('catalogItemStatus')",
									"&& data.hasOwnProperty('repositoryCount') && data.hasOwnProperty('repositoryStatus') && data.hasOwnProperty('systemTime') && data.hasOwnProperty('lastStatusTime')",
									"&& data.hasOwnProperty('ipAddress') && data.hasOwnProperty('processedMessages') && data.hasOwnProperty('catalogItemMessageCounts') && data.hasOwnProperty('messageSpeed')",
									"&& data.hasOwnProperty('lastCommandTime') && data.hasOwnProperty('networkInterface') && data.hasOwnProperty('dockerUrl') && data.hasOwnProperty('diskLimit')",
									"&& data.hasOwnProperty('diskDirectory') && data.hasOwnProperty('memoryLimit') && data.hasOwnProperty('cpuLimit') && data.hasOwnProperty('logLimit')",
									"&& data.logDirectory && data.hasOwnProperty('bluetoothEnabled') && data.hasOwnProperty('abstractedHardwareEnabled') && data.hasOwnProperty('logFileCount') ",
									"&& data.hasOwnProperty('version') && data.hasOwnProperty('isReadyToUpgrade') && data.hasOwnProperty('isReadyToRollback') && data.hasOwnProperty('statusFrequency')",
									"&& data.hasOwnProperty('changeFrequency') && data.hasOwnProperty('deviceScanFrequency') && data.hasOwnProperty('tunnel') && data.hasOwnProperty('watchdogEnabled')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId')",
									"&& data.hasOwnProperty('logLevel') && data.hasOwnProperty('dockerPruningFrequency')",
									"&& data.hasOwnProperty('availableDiskThreshold')",
									"&& data.hasOwnProperty('fogTypeId') && data.hasOwnProperty('userId') && data.hasOwnProperty('isSystem');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node Version Command rollback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46ee80bd-59df-4fc0-b9db-8699eee95853",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 400;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response error message is valid\"] = data.name === 'ValidationError' && data.message === 'Can\\'t rollback version now. There are no backups on agent';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/rollback",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"rollback"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Node Version Command upgrade",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "153c87ad-f5dd-4586-92cd-751bc1064760",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/version/upgrade",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"version",
								"upgrade"
							]
						},
						"description": "change version command\nAvailable values : upgrade, rollback"
					},
					"response": []
				},
				{
					"name": "Reboot Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "656b1257-42ce-42e0-9d9b-7e519d94f73c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/reboot",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"reboot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prune Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d506a595-1e06-4c95-b59e-1ae0755f1507",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/prune",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"prune"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL Hardware Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a6b56fa-eb1b-4170-8c65-e1de93721235",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/hw",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"hw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves HAL USB Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea27bc38-b29c-41a2-a210-91f78c5aa746",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}/hal/usb",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}",
								"hal",
								"usb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "089c4a00-2c88-4bdf-9653-a5263d7f8822",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": 1,\n\t\"key\":\"testtesttest\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{system-node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{system-node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e6f4d20-7338-4aa5-a9cd-c567f79ad570",
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/iofog/{{node-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog",
								"{{node-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Node Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21190fbd-8a4a-4633-a71d-91df89bc6b2c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response does not contain any node\"] = data.hasOwnProperty('fogs') && data.fogs.length === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/iofog-list?filters[0][key]=uuid&filters[0][value]={{node-id}}&filters[0][condition]=equals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"iofog-list"
							],
							"query": [
								{
									"key": "filters[0][key]",
									"value": "uuid"
								},
								{
									"key": "filters[0][value]",
									"value": "{{node-id}}"
								},
								{
									"key": "filters[0][condition]",
									"value": "equals"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f57e4ce7-f405-4e24-b806-2025455a8d38",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "ioFog collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c968f3d9-553a-4a2b-99b6-958d798b66cc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a1e481a7-a722-4b6d-aa47-b62595b932fc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Registries",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc3bdebd-d526-4803-803c-d189f8c50b15",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('userId') && data.firstName && data.lastName && data.email && data.hasOwnProperty('emailActivated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47e17f07-0c5a-4942-91e5-c624254b5254",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.accessToken;",
									"",
									"",
									"postman.setGlobalVariable(\"user-token\", data.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@domain.com\",\n  \"password\": \"#Bugs4Fun\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/user/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ed47fa0-5978-42ce-8db6-b455b0d20c43",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('id');",
									"",
									"postman.setGlobalVariable(\"reg-id\", data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string\",\n  \"isPublic\": true,\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"email\": \"test@gmail.com\",\n  \"requiresCert\": false,\n  \"certificate\": \"string\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0d180c9-665e-48f9-9ac0-71f6dce8b047",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{user-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"string2\",\n  \"isPublic\": true,\n  \"username\": \"string3\",\n  \"password\": \"string4\",\n  \"email\": \"test2@gmail.com\",\n  \"requiresCert\": true,\n  \"certificate\": \"string6\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Registries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50d7620-665d-4ec0-b2ad-4bece9026583",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Response validation passed\"] = data.hasOwnProperty('registries');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v3/registries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "668bf5c9-8e62-4835-a9bb-940a1b7d8bdc",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/registries/{{reg-id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"registries",
								"{{reg-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a018b727-7a0a-4847-9b29-54272b68d90c",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v3/user/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v3",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Registries collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9a8fd57b-d380-4c07-b0b2-eb861e2a437e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0e333dc9-1522-46ff-916b-60c4f1ab8c80",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ae7886ff-00f7-4176-9bc7-f31cfa9c0448",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b5af44c6-84dc-4208-9958-a1c04ecfa5ad",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "45b5e888-3fa5-4089-9b5f-fc18ba018481",
			"key": "host",
			"value": "127.0.0.1:51121",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}